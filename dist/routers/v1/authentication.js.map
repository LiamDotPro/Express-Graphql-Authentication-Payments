{"version":3,"sources":["../../../routers/v1/authentication.js"],"names":["ExtractJwt","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","process","env","JWT_SECRET","router","auth","passport","post","req","res","next","body","email","password","json","message","error","login","loginAttempt","payload","id","user","session","key_name","token","sign","expiresIn","authenticate"],"mappings":";;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;;AANA;;;;;AAQA;AACA,IAAIA,aAAa,sBAAYA,UAA7B;;AAEA;AACA,IAAIC,aAAa,EAAjB;AACAA,WAAWC,cAAX,GAA4BF,WAAWG,2BAAX,EAA5B;AACAF,WAAWG,WAAX,GAAyBC,QAAQC,GAAR,CAAYC,UAArC;;AAEA,IAAMC,SAAS,2BAAf;AACA,IAAMC,OAAO,8BAAb;AACA,IAAMC,WAAW,yBAAyBA,QAA1C;;AAEA;;;AAGAF,OAAOG,IAAP,CAAY,QAAZ;AAAA,uEAAsB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEd,CAACF,IAAIG,IAAJ,CAASC,KAAV,IAAmB,CAACJ,IAAIG,IAAJ,CAASE,QAFf;AAAA;AAAA;AAAA;;AAGdJ,4BAAIK,IAAJ,CAAS;AACLC,qCAAS,KADJ;AAELC,mCAAO;AAFF,yBAAT;AAHc,yDAOPN,MAPO;;AAAA;AAAA;AAAA,+BAUOL,KAAKY,KAAL,CAAWT,IAAIG,IAAJ,CAASC,KAApB,EAA2BJ,IAAIG,IAAJ,CAASE,QAApC,CAVP;;AAAA;AAUdK,oCAVc;;AAAA,8BAYdA,aAAaC,OAAb,KAAyB,EAZX;AAAA;AAAA;AAAA;;AAadV,4BAAIK,IAAJ,CAAS;AACLC,qCAAS,KADJ;AAELC,mCAAO;AAFF,yBAAT;AAbc,yDAiBPN,MAjBO;;AAAA;AAoBdS,+BApBc,GAoBJ;AACVC,gCAAIF,aAAaG,IAAb,CAAkBD;AADZ,yBApBI;;AAwBlB;;AACAZ,4BAAIc,OAAJ,CAAYC,QAAZ,GAAuBL,aAAaG,IAAb,CAAkBD,EAAzC;;AAEA;AACII,6BA5Bc,GA4BN,uBAAIC,IAAJ,CAASN,OAAT,EAAkBtB,WAAWG,WAA7B,EAA0C,EAAC0B,WAAW,KAAK,EAAjB,EAA1C,CA5BM;;AA6BlBjB,4BAAIK,IAAJ,CAAS,EAACC,SAAS,IAAV,EAAgBS,OAAOA,KAAvB,EAAT;AA7BkB,yDA8BXd,MA9BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;;AAkCAN,OAAOG,IAAP,CAAY,SAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB,CAE1C,CAFD;;AAIAN,OAAOG,IAAP,CAAY,eAAZ,EAA6BD,SAASqB,YAAT,CAAsB,KAAtB,EAA6B,EAACL,SAAS,KAAV,EAA7B,CAA7B,EAA6E,UAACd,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7FD,QAAIK,IAAJ,CAAS,EAACQ,SAASd,IAAIc,OAAd,EAAT;AACAZ;AACH,CAHD;;kBAKeN,M","file":"authentication.js","sourcesContent":["import {Router} from 'restify-router';\r\n/**\r\n * Path imports\r\n */\r\nimport Authentication from '../../library/Accounts/authentication';\r\nimport passportJWT from 'passport-jwt';\r\nimport jwt from 'jsonwebtoken';\r\nimport configuredPassport from '../../library/Passport/Passport';\r\n\r\n// Passport Data\r\nlet ExtractJwt = passportJWT.ExtractJwt;\r\n\r\n// token options.\r\nlet jwtOptions = {};\r\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\njwtOptions.secretOrKey = process.env.JWT_SECRET;\r\n\r\nconst router = new Router();\r\nconst auth = new Authentication();\r\nconst passport = new configuredPassport().passport;\r\n\r\n/**\r\n * Routes\r\n */\r\nrouter.post('/login', async (req, res, next) => {\r\n\r\n    if (!req.body.email || !req.body.password) {\r\n        res.json({\r\n            message: 'bad',\r\n            error: 'Username or Password not found.'\r\n        });\r\n        return next();\r\n    }\r\n\r\n    let loginAttempt = await auth.login(req.body.email, req.body.password);\r\n\r\n    if (loginAttempt.payload !== 11) {\r\n        res.json({\r\n            message: 'bad',\r\n            error: 'Username or Password not found.'\r\n        });\r\n        return next();\r\n    }\r\n\r\n    let payload = {\r\n        id: loginAttempt.user.id\r\n    };\r\n\r\n    // setup session\r\n    req.session.key_name = loginAttempt.user.id;\r\n\r\n    // Sets expiration date\r\n    let token = jwt.sign(payload, jwtOptions.secretOrKey, {expiresIn: 60 * 60});\r\n    res.json({message: 'ok', token: token});\r\n    return next();\r\n\r\n});\r\n\r\nrouter.post('/logout', (req, res, next) => {\r\n\r\n});\r\n\r\nrouter.post('/validateUser', passport.authenticate('jwt', {session: false}), (req, res, next) => {\r\n    res.json({session: req.session});\r\n    next();\r\n});\r\n\r\nexport default router;"]}
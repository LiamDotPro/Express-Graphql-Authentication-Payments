{"version":3,"sources":["../../../routers/v1/accounts.js"],"names":["ExtractJwt","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","process","env","JWT_SECRET","router","auth","post","req","res","body","email","password","login","then","_res","payload","id","user","token","jwt","sign","expiresIn","json","message","send","error","next"],"mappings":";;;;;;AAAA;;AAIA;;;;AACA;;;;;;AAGA;;AAPA;;;AAQA,IAAIA,aAAa,sBAAYA,UAA7B;;AAEA;AACA,IAAIC,aAAa,EAAjB;AACAA,WAAWC,cAAX,GAA4BF,WAAWG,2BAAX,EAA5B;AACAF,WAAWG,WAAX,GAAyBC,QAAQC,GAAR,CAAYC,UAArC;;AAEA,IAAMC,SAAS,2BAAf;AACA,IAAMC,OAAO,iCAAb;;AAEA;;;AAGAD,OAAOE,IAAP,CAAY,QAAZ,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,QAAID,IAAIE,IAAJ,CAASC,KAAT,IAAkBH,IAAIE,IAAJ,CAASE,QAA/B,EAAyC;;AAErC,YAAID,QAAQH,IAAIE,IAAJ,CAASC,KAArB;AACA,YAAIC,WAAWJ,IAAIE,IAAJ,CAASE,QAAxB;;AAEAN,aAAKO,KAAL,CAAWF,KAAX,EAAkBC,QAAlB,EAA4BE,IAA5B,CAAiC,UAACC,IAAD,EAAU;AACvC,gBAAIA,KAAKC,OAAL,KAAiB,EAArB,EAAyB;AACrB,oBAAIA,UAAU;AACVC,wBAAIF,KAAKG,IAAL,CAAUD;AADJ,iBAAd;AAGA;AACA,oBAAIE,QAAQC,IAAIC,IAAJ,CAASL,OAAT,EAAkBlB,WAAWG,WAA7B,EAA0C,EAACqB,WAAW,KAAK,EAAjB,EAA1C,CAAZ;AACAb,oBAAIc,IAAJ,CAAS,EAACC,SAAS,IAAV,EAAgBL,OAAOA,KAAvB,EAAT;AACH,aAPD,MAOO;AACHV,oBAAIgB,IAAJ,CAAS;AACLD,6BAAS,KADJ;AAELE,2BAAO;AAFF,iBAAT;AAIH;AACJ,SAdD;AAeH,KApBD,MAoBO;AACHjB,YAAIgB,IAAJ,CAAS;AACLD,qBAAS,KADJ;AAELE,mBAAO;AAFF,SAAT;AAIH;AACJ,CA3BD;;AA6BArB,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWkB,IAAX,EAAoB;AACjClB,QAAIgB,IAAJ,CAAS,EAAT;AACAE;AACH,CAHD;;kBAKetB,M","file":"accounts.js","sourcesContent":["import {Router} from 'restify-router';\r\n/**\r\n * Path imports\r\n */\r\nimport Authentication from '../../library/AutenticateFromDB';\r\nimport passportJWT from 'passport-jwt';\r\n\r\n\r\n// Passport Data\r\nlet ExtractJwt = passportJWT.ExtractJwt;\r\n\r\n// token options.\r\nlet jwtOptions = {};\r\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\njwtOptions.secretOrKey = process.env.JWT_SECRET;\r\n\r\nconst router = new Router();\r\nconst auth = new Authentication();\r\n\r\n/**\r\n * Routes\r\n */\r\nrouter.post('/login', (req, res) => {\r\n    if (req.body.email && req.body.password) {\r\n\r\n        let email = req.body.email;\r\n        let password = req.body.password;\r\n\r\n        auth.login(email, password).then((_res) => {\r\n            if (_res.payload === 11) {\r\n                let payload = {\r\n                    id: _res.user.id\r\n                };\r\n                // Sets expiration date\r\n                let token = jwt.sign(payload, jwtOptions.secretOrKey, {expiresIn: 60 * 60});\r\n                res.json({message: 'ok', token: token});\r\n            } else {\r\n                res.send({\r\n                    message: 'bad',\r\n                    error: 'Username or Password not found.'\r\n                })\r\n            }\r\n        })\r\n    } else {\r\n        res.send({\r\n            message: 'bad',\r\n            error: 'Username or Password not found.'\r\n        })\r\n    }\r\n});\r\n\r\nrouter.post('/', (req, res, next) => {\r\n    res.send({});\r\n    next();\r\n});\r\n\r\nexport default router;"]}
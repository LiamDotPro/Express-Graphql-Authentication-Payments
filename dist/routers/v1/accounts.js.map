{"version":3,"sources":["../../../routers/v1/accounts.js"],"names":["ExtractJwt","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","process","env","JWT_SECRET","router","auth","passport","post","req","res","next","body","email","password","json","message","error","login","then","_res","console","log","payload","id","user","token","sign","expiresIn","get","authenticate","session","send"],"mappings":";;;;;;AAAA;;AAIA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AARA;;;AASA,IAAIA,aAAa,sBAAYA,UAA7B;;AAEA;AACA,IAAIC,aAAa,EAAjB;AACAA,WAAWC,cAAX,GAA4BF,WAAWG,2BAAX,EAA5B;AACAF,WAAWG,WAAX,GAAyBC,QAAQC,GAAR,CAAYC,UAArC;;AAEA,IAAMC,SAAS,2BAAf;AACA,IAAMC,OAAO,8BAAb;AACA,IAAMC,WAAW,yBAAyBA,QAA1C;;AAEA;;;AAGAF,OAAOG,IAAP,CAAY,QAAZ,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtC,QAAI,CAACF,IAAIG,IAAJ,CAASC,KAAV,IAAmB,CAACJ,IAAIG,IAAJ,CAASE,QAAjC,EAA2C;AACvCJ,YAAIK,IAAJ,CAAS;AACLC,qBAAS,KADJ;AAELC,mBAAO;AAFF,SAAT;AAIA,eAAON,MAAP;AACH;;AAEDL,SAAKY,KAAL,CAAWT,IAAIG,IAAJ,CAASC,KAApB,EAA2BJ,IAAIG,IAAJ,CAASE,QAApC,EAA8CK,IAA9C,CAAmD,UAACC,IAAD,EAAU;;AAEzDC,gBAAQC,GAAR,CAAYb,IAAIG,IAAJ,CAASC,KAArB,EAA4BJ,IAAIG,IAAJ,CAASE,QAArC;;AAEA,YAAIM,KAAKG,OAAL,KAAiB,EAArB,EAAyB;AACrBb,gBAAIK,IAAJ,CAAS;AACLC,yBAAS,KADJ;AAELC,uBAAO;AAFF,aAAT;AAIA,mBAAON,MAAP;AACH;;AAED,YAAIY,UAAU;AACVC,gBAAIJ,KAAKK,IAAL,CAAUD;AADJ,SAAd;AAGA;AACA,YAAIE,QAAQ,uBAAIC,IAAJ,CAASJ,OAAT,EAAkBzB,WAAWG,WAA7B,EAA0C,EAAC2B,WAAW,KAAK,EAAjB,EAA1C,CAAZ;AACAlB,YAAIK,IAAJ,CAAS,EAACC,SAAS,IAAV,EAAgBU,OAAOA,KAAvB,EAAT;AACA,eAAOf,MAAP;AACH,KAnBD;AAoBH,CA7BD;;AA+BAN,OAAOwB,GAAP,CAAW,UAAX,EAAuBtB,SAASuB,YAAT,CAAsB,KAAtB,EAA6B,EAACC,SAAS,KAAV,EAA7B,CAAvB,EAAuE,UAACtB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvFU,YAAQC,GAAR,CAAY,MAAZ;AACH,CAFD;;AAIAjB,OAAOG,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjCD,QAAIsB,IAAJ,CAAS,EAAT;AACArB;AACH,CAHD;;kBAKeN,M","file":"accounts.js","sourcesContent":["import {Router} from 'restify-router';\r\n/**\r\n * Path imports\r\n */\r\nimport Authentication from '../../library/Accounts/authentication';\r\nimport passportJWT from 'passport-jwt';\r\nimport jwt from 'jsonwebtoken';\r\nimport configuredPassport from '../../library/Passport/Passport';\r\n\r\n// Passport Data\r\nlet ExtractJwt = passportJWT.ExtractJwt;\r\n\r\n// token options.\r\nlet jwtOptions = {};\r\njwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\njwtOptions.secretOrKey = process.env.JWT_SECRET;\r\n\r\nconst router = new Router();\r\nconst auth = new Authentication();\r\nconst passport = new configuredPassport().passport;\r\n\r\n/**\r\n * Routes\r\n */\r\nrouter.post('/login', (req, res, next) => {\r\n    if (!req.body.email || !req.body.password) {\r\n        res.json({\r\n            message: 'bad',\r\n            error: 'Username or Password not found.'\r\n        });\r\n        return next();\r\n    }\r\n\r\n    auth.login(req.body.email, req.body.password).then((_res) => {\r\n\r\n        console.log(req.body.email, req.body.password);\r\n\r\n        if (_res.payload !== 11) {\r\n            res.json({\r\n                message: 'bad',\r\n                error: 'Username or Password not found.'\r\n            });\r\n            return next();\r\n        }\r\n\r\n        let payload = {\r\n            id: _res.user.id\r\n        };\r\n        // Sets expiration date\r\n        let token = jwt.sign(payload, jwtOptions.secretOrKey, {expiresIn: 60 * 60});\r\n        res.json({message: 'ok', token: token});\r\n        return next();\r\n    })\r\n});\r\n\r\nrouter.get('/account', passport.authenticate('jwt', {session: false}), (req, res, next) => {\r\n    console.log('test');\r\n});\r\n\r\nrouter.post('/', (req, res, next) => {\r\n    res.send({});\r\n    next();\r\n});\r\n\r\nexport default router;"]}
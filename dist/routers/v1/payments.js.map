{"version":3,"sources":["../../../routers/v1/payments.js"],"names":["require","config","keyPublishable","process","env","PUBLISHABLE_KEY","stripe","STRIPE_SECRET_KEY","router","post","req","res","next","send","get","readFile","err","data","setHeader","Buffer","byteLength","writeHead","write","end"],"mappings":";;;;;;AAGA;;;;AAEA;;;;AALA;AACAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAMA;;;AAGA;AACA,IAAMC,iBAAiBC,QAAQC,GAAR,CAAYC,eAAnC;AACA,IAAMC,SAASN,QAAQ,QAAR,EAAkBG,QAAQC,GAAR,CAAYG,iBAA9B,CAAf;;AAEA,IAAMC,SAAS,2BAAf;;AAEA;;;;AAKA;;;;;;;;;;;;;;;;;AAiBAA,OAAOC,IAAP,CAAY,sBAAZ,EAAoC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpDD,MAAIE,IAAJ,CAAS,EAAT;AACAD;AACH,CAHD;;AAKA;;;AAGAJ,OAAOM,GAAP,CAAW,GAAX,EAAgB,UAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAChC,eAAGG,QAAH,CAAY,gCAAZ,EAA8C,MAA9C,EAAsD,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACvE,QAAID,GAAJ,EAAS;AACLJ,WAAKI,GAAL;AACA;AACH;AACDL,QAAIO,SAAJ,CAAc,cAAd,EAA8B,WAA9B;AACAP,QAAIO,SAAJ,CAAc,gBAAd,EAAgCC,OAAOC,UAAP,CAAkBH,IAAlB,CAAhC;AACAN,QAAIU,SAAJ,CAAc,GAAd;AACAV,QAAIW,KAAJ,CAAUL,IAAV;AACAN,QAAIY,GAAJ;AACAX;AACH,GAXD;AAYH,CAbD;;AAeA;;;;AAIAJ,OAAOC,IAAP,CAAY,iBAAZ,EAA+B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC/CD,MAAIE,IAAJ,CAAS,EAAT;AACAD;AACH,CAHD;;kBAMeJ,M","file":"payments.js","sourcesContent":["// Configure out environment to be available.\r\nrequire('dotenv').config();\r\n\r\nimport fs from 'fs';\r\n\r\nimport {Router} from 'restify-router';\r\n\r\n/**\r\n * Path imports\r\n */\r\n// Stripe Payment Integration\r\nconst keyPublishable = process.env.PUBLISHABLE_KEY;\r\nconst stripe = require(\"stripe\")(process.env.STRIPE_SECRET_KEY);\r\n\r\nconst router = new Router();\r\n\r\n/**\r\n * Routes\r\n */\r\n\r\n\r\n/**\r\n * Takes a subsequent cart ID and confirms all items are in stock and generates the amount due.\r\n * Following this the user is returned the Amount alongside server side served build information.\r\n *\r\n * <form action=\"your-server-side-code\" method=\"POST\">\r\n *  <script\r\n *  src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\r\n *      data-key=\"pk_test_DGCRaVVvH9dDOWNcEeK66ulx\"\r\n *      data-amount=\"999\"\r\n *      data-name=\"Demo Site\"\r\n *      data-description=\"Widget\"\r\n *      data-image=\"https://stripe.com/img/documentation/checkout/marketplace.png\"\r\n *      data-locale=\"auto\"\r\n *      data-currency=\"gbp\">\r\n *  </script>\r\n * </form>\r\n */\r\nrouter.post('/createPaymentButton', (req, res, next) => {\r\n    res.send({});\r\n    next();\r\n});\r\n\r\n/**\r\n * Tests connecting sockets with vanilla html page.\r\n */\r\nrouter.get('/', (req, res, next) => {\r\n    fs.readFile('./dist/test-pages/sockets.html', 'utf8', function (err, data) {\r\n        if (err) {\r\n            next(err);\r\n            return;\r\n        }\r\n        res.setHeader('Content-Type', 'text/html');\r\n        res.setHeader('Content-Length', Buffer.byteLength(data));\r\n        res.writeHead(200);\r\n        res.write(data);\r\n        res.end();\r\n        next();\r\n    });\r\n});\r\n\r\n/**\r\n * This endpoint handles the processing of information subsequent to a successful checkout using stripe checkout.\r\n * Furthermore the cart total and inventory\r\n */\r\nrouter.post('/processPayment', (req, res, next) => {\r\n    res.send({});\r\n    next();\r\n});\r\n\r\n\r\nexport default router;"]}
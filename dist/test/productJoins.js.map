{"version":3,"sources":["../../test/productJoins.js"],"names":["assert","require","products","describe","createdItemId","it","createProduct","Date","result","insertedId","equal","payload","msg","product","findAll","where","id","include","model","inventory","productIdentifer","console","log","dataValues","deleteProduct","isTrue"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,SAASC,QAAQ,MAAR,EAAgBD,MAA7B;;AAEA,IAAME,WAAW,4BAAjB;;AAEAC,SAAS,eAAT,EAA0B,YAAM;AAC5BA,aAAS,oBAAT,EAA+B,YAAM;;AAEjC,YAAIC,gBAAgB,IAApB;;AAEAC,WAAG,6BAAH,0DAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACXH,SAASI,aAAT,CAAuB,cAAvB,EAAuC,qBAAvC,EAA8D,eAA9D,EAA+E,wBAA/E,EAAyG,CAAzG,EAA4G,KAA5G,EAAmH,IAAIC,IAAJ,CAAS,4BAAT,CAAnH,EAA2J,IAAIA,IAAJ,CAAS,4BAAT,CAA3J,CADW;;AAAA;AAC1BC,kCAD0B;;AAE9BJ,4CAAgBI,OAAOC,UAAvB;AAF8B,6DAGvBT,OAAOU,KAAP,CAAa,CAAb,EAAgBF,OAAOG,OAAvB,EAAgCH,OAAOI,GAAvC,CAHuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAlC;;AAMAP,WAAG,qEAAH,0DAA0E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAE/C,gBAAGQ,OAAH,CAAWC,OAAX,CAAmB;AAClCC,uCAAO;AACHC,wCAAIZ;AADD,iCAD2B;AAIlCa,yCAAS,CAAC;AACNC,2CAAO,gBAAGC,SADJ;AAENJ,2CAAO;AACHK,0DAAkBhB;AADf;AAFD,iCAAD;AAJyB,6BAAnB,CAF+C;;AAAA;AAE9DI,kCAF8D;;;AAclE;;;;;;;;;AASAa,oCAAQC,GAAR,CAAYd,MAAZ;;AAvBkE,8DAyB3DR,OAAOU,KAAP,CAAaF,OAAO,CAAP,EAAUe,UAAV,CAAqBJ,SAArB,CAA+BC,gBAA5C,EAA8DhB,aAA9D,EAA6EI,OAAOI,GAApF,CAzB2D;;AAAA;AAAA;AAAA;;AA2BlES,oCAAQC,GAAR;;AA3BkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1E;;AA+BAjB,WAAG,2CAAH,0DAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACzBH,SAASsB,aAAT,CAAuBpB,aAAvB,CADyB;;AAAA;AACxCI,kCADwC;AAAA,8DAErCR,OAAOyB,MAAP,CAAcjB,MAAd,EAAsB,+BAAtB,CAFqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhD;AAKH,KA9CD;AA+CH,CAhDD","file":"productJoins.js","sourcesContent":["import 'babel-polyfill';\r\nimport ProductBase from '../library/Products/productsBase';\r\nimport db from '../models/index';\r\n\r\nlet assert = require('chai').assert;\r\n\r\nconst products = new ProductBase();\r\n\r\ndescribe('Product Joins', () => {\r\n    describe('Product Join tests', () => {\r\n\r\n        let createdItemId = null;\r\n\r\n        it('Should create a new product', async () => {\r\n            let result = await products.createProduct('Test Product', 'This is a test item', 'thumbnail.png', 'Dispatches in 2-4 days', 0, false, new Date(\"2018-03-31 02:00:07.525+01\"), new Date(\"2018-03-31 02:00:07.525+01\"));\r\n            createdItemId = result.insertedId;\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get the newly created product joined with Inventories table.', async () => {\r\n            try {\r\n                let result = await db.product.findAll({\r\n                    where: {\r\n                        id: createdItemId\r\n                    },\r\n                    include: [{\r\n                        model: db.inventory,\r\n                        where: {\r\n                            productIdentifer: createdItemId\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                /**\r\n                 * , {\r\n                        model: db.productImages,\r\n                        where: {\r\n                            productId: createdItemId\r\n                        }\r\n                    \r\n                 */\r\n\r\n                console.log(result);\r\n\r\n                return assert.equal(result[0].dataValues.inventory.productIdentifer, createdItemId, result.msg);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n\r\n        it('Should delete the previously made product', async () => {\r\n            let result = await products.deleteProduct(createdItemId);\r\n            return assert.isTrue(result, \"Record could not be deleted..\");\r\n        });\r\n\r\n    });\r\n});"]}
{"version":3,"sources":["../../test/products.js"],"names":["assert","require","products","describe","createdItemId","it","createProduct","Date","result","insertedId","equal","payload","msg","updateProductById","getAllProducts","isAbove","productList","length","getProductById","getProductsByPagination","product","productName","deleteProduct","isTrue"],"mappings":"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","file":"products.js","sourcesContent":["import 'babel-polyfill';\r\nimport ProductBase from '../library/Products/productsBase';\r\n\r\nlet assert = require('chai').assert;\r\n\r\nconst products = new ProductBase();\r\n\r\ndescribe('Products', () => {\r\n    describe('Products Base Library', () => {\r\n\r\n        let createdItemId = null;\r\n\r\n        it('Should create a new product', async () => {\r\n            let result = await products.createProduct('Test Product', 'This is a test item', 'thumbnail.png', 'Dispatches in 2-4 days', 0, false, 10, new Date(\"2018-03-31 02:00:07.525+01\"), new Date(\"2018-03-31 02:00:07.525+01\"));\r\n            createdItemId = result.insertedId;\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should update the previously made product', async () => {\r\n            let result = await products.updateProductById(createdItemId, 'Test Product Updated', 'This is a test item', 'thumbnail.png', 'Dispatches in 2-4 days', 0, false, 10, new Date(\"2018-03-31 02:00:07.525+01\"), new Date(\"2018-03-31 02:00:07.525+01\"));\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get all products', async () => {\r\n            let result = await products.getAllProducts();\r\n            return assert.isAbove(result.productList.length, 0, result.msg);\r\n        });\r\n\r\n        it('Should get default product using ID', async () => {\r\n            let result = await products.getProductById(createdItemId);\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get products based on pagination', async () => {\r\n            let result = await products.getProductsByPagination(1);\r\n            assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should validate that the product has had its title updated', async () => {\r\n            let result = await products.getProductById(createdItemId);\r\n            assert.equal('Test Product Updated', result.product.productName, result.msg)\r\n        });\r\n\r\n        it('Should delete the previously made product', async () => {\r\n            let result = await products.deleteProduct(createdItemId);\r\n            return assert.isTrue(result, \"Record could not be deleted..\");\r\n        });\r\n\r\n    });\r\n});"]}
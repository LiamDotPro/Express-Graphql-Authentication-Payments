{"version":3,"sources":["../../test/products.js"],"names":["assert","require","products","inventories","describe","createdItemId","it","createProduct","Date","result","insertedId","equal","payload","msg","getInventoryByProductId","inventory","productIdentifer","updateProductById","getAllProducts","isAbove","productList","length","getProductById","getProductsByPagination","product","productName","deleteProduct","isTrue"],"mappings":"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","file":"products.js","sourcesContent":["import 'babel-polyfill';\r\nimport ProductBase from '../library/Products/productsBase';\r\nimport InventoriesBase from '../library/Inventories/InventoriesBase';\r\n\r\nlet assert = require('chai').assert;\r\n\r\nconst products = new ProductBase();\r\nconst inventories = new InventoriesBase();\r\n\r\ndescribe('Products', () => {\r\n    describe('Products Base Library', () => {\r\n\r\n        let createdItemId = null;\r\n\r\n        it('Should create a new product', async () => {\r\n            let result = await products.createProduct('Test Product', 'This is a test item', 'thumbnail.png', 'Dispatches in 2-4 days', 0, false, new Date(\"2018-03-31 02:00:07.525+01\"), new Date(\"2018-03-31 02:00:07.525+01\"));\r\n            createdItemId = result.insertedId;\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should find an inventory for the product', async () => {\r\n            let result = await inventories.getInventoryByProductId(createdItemId);\r\n            assert.equal(result.inventory.productIdentifer, createdItemId, result.msg);\r\n        });\r\n\r\n        it('Should update the previously made product', async () => {\r\n            let result = await products.updateProductById(createdItemId, 'Test Product Updated', 'This is a test item', 'thumbnail.png', 'Dispatches in 2-4 days', 0, false, new Date(\"2018-03-31 02:00:07.525+01\"), new Date(\"2018-03-31 02:00:07.525+01\"));\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get all products', async () => {\r\n            let result = await products.getAllProducts();\r\n            return assert.isAbove(result.productList.length, 0, result.msg);\r\n        });\r\n\r\n        it('Should get default product using ID', async () => {\r\n            let result = await products.getProductById(createdItemId);\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get products based on pagination', async () => {\r\n            let result = await products.getProductsByPagination(1);\r\n            assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should validate that the product has had its title updated', async () => {\r\n            let result = await products.getProductById(createdItemId);\r\n            assert.equal('Test Product Updated', result.product.productName, result.msg)\r\n        });\r\n\r\n        it('Should delete the previously made product', async () => {\r\n            let result = await products.deleteProduct(createdItemId);\r\n            return assert.isTrue(result, \"Record could not be deleted..\");\r\n        });\r\n\r\n    });\r\n});"]}
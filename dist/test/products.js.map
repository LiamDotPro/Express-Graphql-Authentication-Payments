{"version":3,"sources":["../../test/products.js"],"names":["assert","require","products","describe","createdItemId","it","createProduct","Date","result","insertedId","equal","payload","msg","getAllProducts","isAbove","productList","length","getProductById","deleteProduct","isTrue"],"mappings":";;AAAA;;AACA;;;;;;;;AAEA,IAAIA,SAASC,QAAQ,MAAR,EAAgBD,MAA7B;;AAEA,IAAME,WAAW,4BAAjB;;AAEAC,SAAS,UAAT,EAAqB,YAAM;AACvBA,iBAAS,uBAAT,EAAkC,YAAM;;AAEpC,oBAAIC,gBAAgB,IAApB;;AAEAC,mBAAG,6BAAH,0DAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACXH,SAASI,aAAT,CAAuB,cAAvB,EAAuC,qBAAvC,EAA8D,eAA9D,EAA+E,wBAA/E,EAAyG,CAAzG,EAA4G,KAA5G,EAAmH,EAAnH,EAAuH,IAAIC,IAAJ,CAAS,4BAAT,CAAvH,EAA+J,IAAIA,IAAJ,CAAS,4BAAT,CAA/J,CADW;;AAAA;AAC1BC,8DAD0B;;AAE9BJ,wEAAgBI,OAAOC,UAAvB;AAF8B,yFAGvBT,OAAOU,KAAP,CAAa,CAAb,EAAgBF,OAAOG,OAAvB,EAAgCH,OAAOI,GAAvC,CAHuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAlC;;AAMAP,mBAAG,yBAAH,0DAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACPH,SAASW,cAAT,EADO;;AAAA;AACtBL,8DADsB;AAAA,0FAEnBR,OAAOc,OAAP,CAAeN,OAAOO,WAAP,CAAmBC,MAAlC,EAA0C,CAA1C,EAA6CR,OAAOI,GAApD,CAFmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9B;;AAKAP,mBAAG,qCAAH,0DAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACnBH,SAASe,cAAT,CAAwBb,aAAxB,CADmB;;AAAA;AAClCI,8DADkC;AAAA,0FAE/BR,OAAOU,KAAP,CAAa,CAAb,EAAgBF,OAAOG,OAAvB,EAAgCH,OAAOI,GAAvC,CAF+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA1C;;AAKAP,mBAAG,yCAAH,EAA8C,YAAM,CACnD,CADD;;AAGAA,mBAAG,2CAAH,EAAgD,YAAM,CAErD,CAFD;;AAIAA,mBAAG,2CAAH,0DAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DACzBH,SAASgB,aAAT,CAAuBd,aAAvB,CADyB;;AAAA;AACxCI,8DADwC;AAAA,0FAErCR,OAAOmB,MAAP,CAAcX,MAAd,EAAsB,+BAAtB,CAFqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAhD;AAKH,SAhCD;AAiCH,CAlCD","file":"products.js","sourcesContent":["import 'babel-polyfill';\r\nimport ProductBase from '../library/Products/productsBase';\r\n\r\nlet assert = require('chai').assert;\r\n\r\nconst products = new ProductBase();\r\n\r\ndescribe('Products', () => {\r\n    describe('Products Base Library', () => {\r\n\r\n        let createdItemId = null;\r\n\r\n        it('Should create a new product', async () => {\r\n            let result = await products.createProduct('Test Product', 'This is a test item', 'thumbnail.png', 'Dispatches in 2-4 days', 0, false, 10, new Date(\"2018-03-31 02:00:07.525+01\"), new Date(\"2018-03-31 02:00:07.525+01\"));\r\n            createdItemId = result.insertedId;\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get all products', async () => {\r\n            let result = await products.getAllProducts();\r\n            return assert.isAbove(result.productList.length, 0, result.msg);\r\n        });\r\n\r\n        it('Should get default product using ID', async () => {\r\n            let result = await products.getProductById(createdItemId);\r\n            return assert.equal(0, result.payload, result.msg);\r\n        });\r\n\r\n        it('Should get products based on pagination', () => {\r\n        });\r\n\r\n        it('Should update the previously made product', () => {\r\n\r\n        });\r\n\r\n        it('Should delete the previously made product', async () => {\r\n            let result = await products.deleteProduct(createdItemId);\r\n            return assert.isTrue(result, \"Record could not be deleted..\");\r\n        });\r\n\r\n    });\r\n});"]}
{"version":3,"sources":["../../test/accounts.js"],"names":["assert","require","auth","fullAuth","describe","hash","userId","it","findAccountById","then","data","equal","email","encryptPassword","hashedPassword","isOk","comparePasswords","res","isNotOk","checkForDuplicateAccount","payload","msg","createAccount","deleteAccount","registerUser","login","user","id","updateUserPassword"],"mappings":"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","file":"accounts.js","sourcesContent":["let assert = require('chai').assert;\r\n\r\nimport BaseAuth from '../library/Accounts/authenticationBase';\r\nimport FullAuth from '../library/Accounts/authentication';\r\n\r\nconst auth = new BaseAuth();\r\nconst fullAuth = new FullAuth();\r\n\r\ndescribe('Accounts', () => {\r\n    describe('Autentication Library', () => {\r\n\r\n\r\n        let hash = '';\r\n        let userId = null;\r\n\r\n        it('Find the default account by ID', () => {\r\n            return auth.findAccountById(1).then((data) => {\r\n                return assert.equal(data.email, 'liam@liam.pro');\r\n            });\r\n        });\r\n\r\n        it('Create a hash given an arbitary password', () => {\r\n            return auth.encryptPassword('123456789').then((hashedPassword) => {\r\n                hash = hashedPassword;\r\n                return assert.isOk(hashedPassword, 'Hash Not created');\r\n            });\r\n        });\r\n\r\n        it('Correctly compare a hashed password - Correct', () => {\r\n            return auth.comparePasswords(hash, '123456789').then((res) => {\r\n                return assert.isOk(res)\r\n            });\r\n        });\r\n\r\n        it('Correctly compare a hashed password - False', () => {\r\n            return auth.comparePasswords(hash, '12345678').then((res) => {\r\n                return assert.isNotOk(res)\r\n            });\r\n        });\r\n\r\n        it('Should find a duplicate account', () => {\r\n            return auth.checkForDuplicateAccount('liam@liam.pro').then((res) => {\r\n                assert.equal(res.payload, 1);\r\n            });\r\n        });\r\n\r\n        it('Should catch a string that is empty while searching for duplicate', () => {\r\n            return auth.checkForDuplicateAccount('').then((res) => {\r\n                assert.equal(res.msg, 'Fail - No Email Found',);\r\n            });\r\n        });\r\n\r\n        it('Should catch a string that is not a complete email while searching for duplicate', () => {\r\n            return auth.checkForDuplicateAccount('asdasd@t').then((res) => {\r\n                return assert.equal(res.msg, 'Fail - No Email Found', 'Email duplicate check failed with bad email!');\r\n            });\r\n        });\r\n\r\n        it('Should Create an account given an email and a password', () => {\r\n            return auth.createAccount('test@test.com', '123456789').then((res) => {\r\n                return assert.equal(res.payload, 10, 'Test Email was not created!');\r\n            });\r\n        });\r\n\r\n        it('Should delete the previously made test account from the database', () => {\r\n            return auth.deleteAccount('test@test.com', '123456789').then((res) => {\r\n                assert.equal(res.payload, 0, res.msg);\r\n            });\r\n        });\r\n\r\n\r\n        it('Should Create an account with the facade class', () => {\r\n            return fullAuth.registerUser('test@test.com', '123456789').then((res) => {\r\n                assert.equal(res.payload, 10, 'Facade class did not create an account!');\r\n            })\r\n        });\r\n\r\n\r\n        it('Should Login an existing user with there credentials', () => {\r\n            return fullAuth.login('test@test.com', '123456789').then((res) => {\r\n                if (res.payload === 11) {\r\n                    userId = res.user.id;\r\n                }\r\n                assert.equal(res.payload, 11, res.msg);\r\n            })\r\n        });\r\n\r\n        it('Should Change the password of the previously created account', () => {\r\n            return fullAuth.updateUserPassword('123456789', 'test123.', userId).then((res) => {\r\n                assert.equal(res.payload, 0, res.msg);\r\n            })\r\n        });\r\n\r\n        it('Should Delete an account created with the facade class', () => {\r\n            return auth.deleteAccount('test@test.com', 'test123.').then((res) => {\r\n                assert.equal(res.payload, 0, res.msg);\r\n            });\r\n        });\r\n\r\n    });\r\n\r\n    describe('Passport & JWT', () => {\r\n        it('Should return a signed JWT Token', () => {\r\n\r\n        });\r\n\r\n        it('Should Validate the JWT token as part of the basic strategy', () => {\r\n\r\n        });\r\n    });\r\n});"]}
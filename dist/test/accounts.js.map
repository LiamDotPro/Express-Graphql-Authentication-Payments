{"version":3,"sources":["../../test/accounts.js"],"names":["assert","require","auth","describe","hash","it","findAccountById","then","data","equal","email","encryptPassword","hashedPassword","isOk","comparePasswords","res","isNotOk","checkForDuplicateAccount","payload","msg","createAccount","deleteAccount"],"mappings":";;AAEA;;;;;;AAFA,IAAIA,SAASC,QAAQ,MAAR,EAAgBD,MAA7B;;AAIA,IAAME,OAAO,kCAAb;;AAEAC,SAAS,UAAT,EAAqB,YAAM;AACvBA,aAAS,uBAAT,EAAkC,YAAM;;AAGpC,YAAIC,OAAO,EAAX;;AAEAC,WAAG,gCAAH,EAAqC,YAAM;AACvC,mBAAOH,KAAKI,eAAL,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B,UAACC,IAAD,EAAU;AAC1C,uBAAOR,OAAOS,KAAP,CAAaD,KAAKE,KAAlB,EAAyB,eAAzB,CAAP;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAL,WAAG,0CAAH,EAA+C,YAAM;AACjD,mBAAOH,KAAKS,eAAL,CAAqB,WAArB,EAAkCJ,IAAlC,CAAuC,UAACK,cAAD,EAAoB;AAC9DR,uBAAOQ,cAAP;AACA,uBAAOZ,OAAOa,IAAP,CAAYD,cAAZ,EAA4B,kBAA5B,CAAP;AACH,aAHM,CAAP;AAIH,SALD;;AAOAP,WAAG,+CAAH,EAAoD,YAAM;AACtD,mBAAOH,KAAKY,gBAAL,CAAsBV,IAAtB,EAA4B,WAA5B,EAAyCG,IAAzC,CAA8C,UAACQ,GAAD,EAAS;AAC1D,uBAAOf,OAAOa,IAAP,CAAYE,GAAZ,CAAP;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAV,WAAG,6CAAH,EAAkD,YAAM;AACpD,mBAAOH,KAAKY,gBAAL,CAAsBV,IAAtB,EAA4B,UAA5B,EAAwCG,IAAxC,CAA6C,UAACQ,GAAD,EAAS;AACzD,uBAAOf,OAAOgB,OAAP,CAAeD,GAAf,CAAP;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAV,WAAG,iCAAH,EAAsC,YAAM;AACxC,mBAAOH,KAAKe,wBAAL,CAA8B,eAA9B,EAA+CV,IAA/C,CAAoD,UAACQ,GAAD,EAAS;AAChEf,uBAAOS,KAAP,CAAaM,IAAIG,OAAjB,EAA0B,CAA1B;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAb,WAAG,mEAAH,EAAwE,YAAM;AAC1E,mBAAOH,KAAKe,wBAAL,CAA8B,EAA9B,EAAkCV,IAAlC,CAAuC,UAACQ,GAAD,EAAS;AACnDf,uBAAOS,KAAP,CAAaM,IAAII,GAAjB,EAAsB,uBAAtB;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAd,WAAG,kFAAH,EAAuF,YAAM;AACzF,mBAAOH,KAAKe,wBAAL,CAA8B,UAA9B,EAA0CV,IAA1C,CAA+C,UAACQ,GAAD,EAAS;AAC3D,uBAAOf,OAAOS,KAAP,CAAaM,IAAII,GAAjB,EAAsB,uBAAtB,EAA+C,8CAA/C,CAAP;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAd,WAAG,wDAAH,EAA6D,YAAM;AAC/D,mBAAOH,KAAKkB,aAAL,CAAmB,eAAnB,EAAoChB,IAApC,EAA0CG,IAA1C,CAA+C,UAACQ,GAAD,EAAS;AAC3Df,uBAAOS,KAAP,CAAaM,IAAIG,OAAjB,EAA0B,EAA1B,EAA8B,6BAA9B;AACH,aAFM,CAAP;AAGH,SAJD;;AAMAb,WAAG,kEAAH,EAAuE,YAAM;AACzE,mBAAOH,KAAKmB,aAAL,CAAmB,eAAnB,EAAoC,WAApC,EAAiDd,IAAjD,CAAsD,UAACQ,GAAD,EAAS;AAClEf,uBAAOS,KAAP,CAAaM,IAAIG,OAAjB,EAA0B,CAA1B,EAA6B,+BAA7B;AACH,aAFM,CAAP;AAGH,SAJD;AAKH,KA3DD;AA4DH,CA7DD","file":"accounts.js","sourcesContent":["let assert = require('chai').assert;\r\n\r\nimport Auth from '../library/Accounts/authenticationBase';\r\n\r\nconst auth = new Auth();\r\n\r\ndescribe('Accounts', () => {\r\n    describe('Autentication Library', () => {\r\n\r\n\r\n        let hash = '';\r\n\r\n        it('Find the default account by ID', () => {\r\n            return auth.findAccountById(1).then((data) => {\r\n                return assert.equal(data.email, 'liam@liam.pro');\r\n            });\r\n        });\r\n\r\n        it('Create a hash given an arbitary password', () => {\r\n            return auth.encryptPassword('123456789').then((hashedPassword) => {\r\n                hash = hashedPassword;\r\n                return assert.isOk(hashedPassword, 'Hash Not created');\r\n            });\r\n        });\r\n\r\n        it('Correctly compare a hashed password - Correct', () => {\r\n            return auth.comparePasswords(hash, '123456789').then((res) => {\r\n                return assert.isOk(res)\r\n            });\r\n        });\r\n\r\n        it('Correctly compare a hashed password - False', () => {\r\n            return auth.comparePasswords(hash, '12345678').then((res) => {\r\n                return assert.isNotOk(res)\r\n            });\r\n        });\r\n\r\n        it('Should find a duplicate account', () => {\r\n            return auth.checkForDuplicateAccount('liam@liam.pro').then((res) => {\r\n                assert.equal(res.payload, 1);\r\n            });\r\n        });\r\n\r\n        it('Should catch a string that is empty while searching for duplicate', () => {\r\n            return auth.checkForDuplicateAccount('').then((res) => {\r\n                assert.equal(res.msg, 'Fail - No Email Found',);\r\n            });\r\n        });\r\n\r\n        it('Should catch a string that is not a complete email while searching for duplicate', () => {\r\n            return auth.checkForDuplicateAccount('asdasd@t').then((res) => {\r\n                return assert.equal(res.msg, 'Fail - No Email Found', 'Email duplicate check failed with bad email!');\r\n            });\r\n        });\r\n\r\n        it('Should Create an account given an email and a password', () => {\r\n            return auth.createAccount('test@test.com', hash).then((res) => {\r\n                assert.equal(res.payload, 10, 'Test Email was not created!');\r\n            });\r\n        });\r\n\r\n        it('Should delete the previously made test account from the database', () => {\r\n            return auth.deleteAccount('test@test.com', '123456789').then((res) => {\r\n                assert.equal(res.payload, 0, 'Account could not be deleted!');\r\n            });\r\n        });\r\n    })\r\n});"]}
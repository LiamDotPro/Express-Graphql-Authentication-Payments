{"version":3,"sources":["../../test/addresses.js"],"names":["require","config","addresses","assert","describe","createdId","it","createAddressRecord","result","equal","payload","msg","insertedId","getAddressById","address","line_1","getAllAddresses","isAbove","addressList","length","updateAddressById","deleteAddress","isTrue"],"mappings":";;AACA;;AAEA;;;;;;;;AAHAA,QAAQ,QAAR,EAAkBC,MAAlB;AAEA;;;AAGA,IAAMC,YAAY,6BAAlB;;AAEA,IAAIC,SAASH,QAAQ,MAAR,EAAgBG,MAA7B;;AAEAC,SAAS,WAAT,EAAsB,YAAM;AACxBA,aAAS,mBAAT,EAA8B,YAAM;;AAEhC,YAAIC,YAAY,IAAhB;;AAEAC,WAAG,0CAAH,0DAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACxBJ,UAAUK,mBAAV,CAA8B,CAA9B,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,EAAyD,MAAzD,EAAiE,MAAjE,EAAyE,MAAzE,EAAiF,MAAjF,EAAyF,MAAzF,CADwB;;AAAA;AACvCC,kCADuC;;AAE3CL,mCAAOM,KAAP,CAAaD,OAAOE,OAApB,EAA6B,CAA7B,EAAgCF,OAAOG,GAAvC;AACAN,wCAAYG,OAAOI,UAAnB;;AAH2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA/C;;AAMAN,WAAG,qCAAH,0DAA0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACnBJ,UAAUW,cAAV,CAAyBR,SAAzB,CADmB;;AAAA;AAClCG,kCADkC;;AAEtCL,mCAAOM,KAAP,CAAaD,OAAOM,OAAP,CAAeC,MAA5B,EAAoC,MAApC,EAA4CP,OAAOG,GAAnD;;AAFsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1C;;AAKAL,WAAG,2BAAH,0DAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACTJ,UAAUc,eAAV,EADS;;AAAA;AACxBR,kCADwB;;AAE5BL,mCAAOc,OAAP,CAAeT,OAAOU,WAAP,CAAmBC,MAAlC,EAA0C,CAA1C,EAA6CX,OAAOG,GAApD;;AAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhC;;AAKAL,WAAG,+CAAH,0DAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC7BJ,UAAUkB,iBAAV,CAA4Bf,SAA5B,EAAuC,OAAvC,EAAgD,MAAhD,EAAwD,MAAxD,EAAgE,MAAhE,EAAwE,MAAxE,EAAgF,MAAhF,EAAwF,MAAxF,EAAgG,MAAhG,CAD6B;;AAAA;AAC5CG,kCAD4C;;AAEhDL,mCAAOM,KAAP,CAAaD,OAAOE,OAApB,EAA6B,CAA7B,EAAgCF,OAAOG,GAAvC;;AAFgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApD;;AAKAL,WAAG,+CAAH,0DAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC7BJ,UAAUmB,aAAV,CAAwBhB,SAAxB,CAD6B;;AAAA;AAC5CG,kCAD4C;AAAA,8DAEzCL,OAAOmB,MAAP,CAAcd,MAAd,EAAsBA,OAAOG,GAA7B,CAFyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApD;AAKH,KA9BD;AA+BH,CAhCD","file":"addresses.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Include files to test here.\r\nimport AddressesBase from '../library/Addresses/AddressesBase';\r\n\r\nconst addresses = new AddressesBase();\r\n\r\nlet assert = require('chai').assert;\r\n\r\ndescribe('Addresses', () => {\r\n    describe('Addresses Library', () => {\r\n\r\n        let createdId = null;\r\n\r\n        it('Should create an initial address record.', async () => {\r\n            let result = await addresses.createAddressRecord(1, 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test');\r\n            assert.equal(result.payload, 0, result.msg);\r\n            createdId = result.insertedId;\r\n        });\r\n\r\n        it('Should get an address record by Id.', async () => {\r\n            let result = await addresses.getAddressById(createdId);\r\n            assert.equal(result.address.line_1, 'test', result.msg);\r\n        });\r\n\r\n        it('Should get all addresses.', async () => {\r\n            let result = await addresses.getAllAddresses();\r\n            assert.isAbove(result.addressList.length, 0, result.msg);\r\n        });\r\n\r\n        it('Should update the previously created address.', async () => {\r\n            let result = await addresses.updateAddressById(createdId, 'test2', 'test', 'test', 'test', 'test', 'test', 'test', 'test');\r\n            assert.equal(result.payload, 0, result.msg);\r\n        });\r\n\r\n        it('Should delete the previously created address.', async () => {\r\n            let result = await addresses.deleteAddress(createdId);\r\n            return assert.isTrue(result, result.msg);\r\n        });\r\n\r\n    });\r\n});"]}
{"version":3,"sources":["../../test/inventories.js"],"names":["require","config","assert","inventories","describe","createdId","it","createNewInventory","result","hasOwnProperty","insertedId","equal","payload","msg","updateInventoryByProductId","getAllInventories","isAbove","inventoryList","length","getInventoryById","isTrue","getInventoryByProductId","updateInventoryById","deleteInventoryById"],"mappings":";;AACA;;AACA;;;;;;;;AAFAA,QAAQ,QAAR,EAAkBC,MAAlB;;;AAIA,IAAIC,SAASF,QAAQ,MAAR,EAAgBE,MAA7B;;AAEA,IAAMC,cAAc,+BAApB;;AAEAC,SAAS,aAAT,EAAwB,YAAM;;AAE1BA,aAAS,qBAAT,EAAgC,YAAM;;AAElC,YAAIC,YAAY,IAAhB;;AAEAC,WAAG,+DAAH,0DAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC7CH,YAAYI,kBAAZ,CAA+B,CAA/B,EAAkC,EAAlC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,CAA5C,CAD6C;;AAAA;AAC5DC,kCAD4D;;;AAGhE,gCAAIA,OAAOC,cAAP,CAAsB,YAAtB,CAAJ,EAAyC;AACrCJ,4CAAYG,OAAOE,UAAnB;AACH;;AAL+D,6DAOzDR,OAAOS,KAAP,CAAaH,OAAOI,OAApB,EAA6B,CAA7B,EAAgCJ,OAAOK,GAAvC,CAPyD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApE;;AAWAP,WAAG,4EAAH,0DAAiF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC1DH,YAAYW,0BAAZ,CAAuC,CAAvC,EAA0C,EAA1C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,CAD0D;;AAAA;AACzEN,kCADyE;AAAA,8DAEtEN,OAAOS,KAAP,CAAaH,OAAOI,OAApB,EAA6B,CAA7B,EAAgCJ,OAAOK,GAAvC,CAFsE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjF;;AAKAP,WAAG,sCAAH,0DAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACpBH,YAAYY,iBAAZ,EADoB;;AAAA;AACnCP,kCADmC;AAAA,8DAEhCN,OAAOc,OAAP,CAAeR,OAAOS,aAAP,CAAqBC,MAApC,EAA4C,CAA5C,EAA+CV,OAAOK,GAAtD,CAFgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3C;;AAKAP,WAAG,6CAAH,0DAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC3BH,YAAYgB,gBAAZ,CAA6Bd,SAA7B,CAD2B;;AAAA;AAC1CG,kCAD0C;AAAA,8DAEvCN,OAAOkB,MAAP,CAAcZ,OAAOC,cAAP,CAAsB,WAAtB,CAAd,EAAkDD,OAAOK,GAAzD,CAFuC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAlD;;AAKAP,WAAG,qDAAH,0DAA0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACnCH,YAAYkB,uBAAZ,CAAoC,CAApC,CADmC;;AAAA;AAClDb,kCADkD;AAAA,8DAE/CN,OAAOkB,MAAP,CAAcZ,OAAOC,cAAP,CAAsB,WAAtB,CAAd,EAAkDD,OAAOK,GAAzD,CAF+C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1D;;AAKAP,WAAG,oEAAH,0DAAyE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAClDH,YAAYmB,mBAAZ,CAAgCjB,SAAhC,EAA2C,CAA3C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD,CADkD;;AAAA;AACjEG,kCADiE;AAAA,8DAE9DN,OAAOS,KAAP,CAAaH,OAAOI,OAApB,EAA6B,CAA7B,EAAgCJ,OAAOK,GAAvC,CAF8D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAzE;;AAKAP,WAAG,2CAAH,0DAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACzBH,YAAYoB,mBAAZ,CAAgClB,SAAhC,CADyB;;AAAA;AACxCG,kCADwC;AAAA,8DAErCN,OAAOkB,MAAP,CAAcZ,MAAd,EAAsBA,OAAOK,GAA7B,CAFqC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhD;AAIH,KA5CD;AA6CH,CA/CD","file":"inventories.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\nimport Inventories from '../library/Inventories/InventoriesBase';\r\n\r\nlet assert = require('chai').assert;\r\n\r\nconst inventories = new Inventories();\r\n\r\ndescribe('Inventories', () => {\r\n\r\n    describe('Inventories Library', () => {\r\n\r\n        let createdId = null;\r\n\r\n        it('Should create a new inventory using the fake product number 0', async () => {\r\n            let result = await inventories.createNewInventory(1, 10, 0, 0, 0);\r\n\r\n            if (result.hasOwnProperty('insertedId')) {\r\n                createdId = result.insertedId;\r\n            }\r\n\r\n            return assert.equal(result.payload, 0, result.msg);\r\n\r\n        });\r\n\r\n        it('Should update the product that was just created (By productId) - +10 stock', async () => {\r\n            let result = await inventories.updateInventoryByProductId(1, 19, 1, 0, 0);\r\n            return assert.equal(result.payload, 0, result.msg);\r\n        });\r\n\r\n        it('Should get all available Inventories', async () => {\r\n            let result = await inventories.getAllInventories();\r\n            return assert.isAbove(result.inventoryList.length, 0, result.msg);\r\n        });\r\n\r\n        it('Should get an inventory using a specific id', async () => {\r\n            let result = await inventories.getInventoryById(createdId);\r\n            return assert.isTrue(result.hasOwnProperty('inventory'), result.msg);\r\n        });\r\n\r\n        it('Should get an inventory using a specific product id', async () => {\r\n            let result = await inventories.getInventoryByProductId(1);\r\n            return assert.isTrue(result.hasOwnProperty('inventory'), result.msg);\r\n        });\r\n\r\n        it('Should update the product that was just created (By id) - -1 stock', async () => {\r\n            let result = await inventories.updateInventoryById(createdId, 1, 9, 1, 0, 0);\r\n            return assert.equal(result.payload, 0, result.msg);\r\n        });\r\n\r\n        it('Should delete the newly created inventory', async () => {\r\n            let result = await inventories.deleteInventoryById(createdId);\r\n            return assert.isTrue(result, result.msg);\r\n        });\r\n    });\r\n});"]}
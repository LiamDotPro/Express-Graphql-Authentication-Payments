{"version":3,"sources":["../../test/customers.js"],"names":["require","config","customer","assert","describe","createdId","it","createCustomer","result","equal","payload","msg","insertedId","getCustomerById","id","getAllCustomers","isAbove","customerList","length","updateCustomerById","deleteCustomerById","isTrue"],"mappings":";;AACA;;AAEA;;;;;;;;AAHAA,QAAQ,QAAR,EAAkBC,MAAlB;AAEA;;;AAGA,IAAIC,WAAW,6BAAf;;AAEA,IAAIC,SAASH,QAAQ,MAAR,EAAgBG,MAA7B;;AAEAC,SAAS,WAAT,EAAsB,YAAM;AACxBA,aAAS,mBAAT,EAA8B,YAAM;;AAEhC,YAAIC,YAAY,IAAhB;;AAEAC,WAAG,8BAAH,0DAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACZJ,SAASK,cAAT,CAAwB,MAAxB,EAAgC,aAAhC,EAA+C,eAA/C,EAAgE,EAAhE,CADY;;AAAA;AAC3BC,kCAD2B;;AAE/BL,mCAAOM,KAAP,CAAaD,OAAOE,OAApB,EAA6B,CAA7B,EAAgCF,OAAOG,GAAvC;AACAN,wCAAYG,OAAOI,UAAnB;;AAH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnC;;AAMAN,WAAG,4CAAH,0DAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC1BJ,SAASW,eAAT,CAAyBR,SAAzB,CAD0B;;AAAA;AACzCG,kCADyC;;AAE7CL,mCAAOM,KAAP,CAAaD,OAAON,QAAP,CAAgBY,EAA7B,EAAiCT,SAAjC,EAA4CG,OAAOG,GAAnD;;AAF6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjD;;AAKAL,WAAG,8BAAH,0DAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACZJ,SAASa,eAAT,EADY;;AAAA;AAC3BP,kCAD2B;;AAE/BL,mCAAOa,OAAP,CAAeR,OAAOS,YAAP,CAAoBC,MAAnC,EAA2C,CAA3C,EAA8CV,OAAOG,GAArD;;AAF+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnC;;AAKAL,WAAG,4CAAH,0DAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC1BJ,SAASiB,kBAAT,CAA4Bd,SAA5B,EAAuC,OAAvC,EAAgD,aAAhD,EAA+D,eAA/D,EAAgF,EAAhF,CAD0B;;AAAA;AACzCG,kCADyC;AAAA,8DAEtCL,OAAOM,KAAP,CAAaD,OAAOE,OAApB,EAA6B,CAA7B,EAAgCF,OAAOG,GAAvC,CAFsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjD;;AAMAL,WAAG,4CAAH,0DAAiD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC1BJ,SAASkB,kBAAT,CAA4Bf,SAA5B,CAD0B;;AAAA;AACzCG,kCADyC;AAAA,8DAEtCL,OAAOkB,MAAP,CAAcb,MAAd,EAAsBA,OAAOG,GAA7B,CAFsC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjD;AAKH,KA/BD;AAgCH,CAjCD","file":"customers.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Include files to test here.\r\nimport CustomerBase from '../library/Customers/CustomersBase';\r\n\r\nlet customer = new CustomerBase();\r\n\r\nlet assert = require('chai').assert;\r\n\r\ndescribe('Customers', () => {\r\n    describe('Customers Library', () => {\r\n\r\n        let createdId = null;\r\n\r\n        it('Should create a new customer', async () => {\r\n            let result = await customer.createCustomer('Liam', '07710679993', 'liam@liam.pro', '');\r\n            assert.equal(result.payload, 0, result.msg);\r\n            createdId = result.insertedId;\r\n        });\r\n\r\n        it('Should get the previously created customer', async () => {\r\n            let result = await customer.getCustomerById(createdId);\r\n            assert.equal(result.customer.id, createdId, result.msg);\r\n        });\r\n\r\n        it('Should get all the customers', async () => {\r\n            let result = await customer.getAllCustomers();\r\n            assert.isAbove(result.customerList.length, 0, result.msg);\r\n        });\r\n\r\n        it('Should update the previously made customer', async () => {\r\n            let result = await customer.updateCustomerById(createdId, 'Barry', '07710679993', 'liam@liam.pro', '');\r\n            return assert.equal(result.payload, 0, result.msg);\r\n\r\n        });\r\n\r\n        it('Should delete the previously made customer', async () => {\r\n            let result = await customer.deleteCustomerById(createdId);\r\n            return assert.isTrue(result, result.msg);\r\n        });\r\n\r\n    });\r\n});"]}
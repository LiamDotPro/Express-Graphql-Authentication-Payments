{"version":3,"sources":["../../../library/Customers/CustomersBase.js"],"names":["customers","CustomersBase","customerName","customerPhone","customerEmailAddress","otherDetails","msg","payload","create","addressId","result","insertedId","dataValues","id","findById","customer","findAll","allCustomers","length","customerList","map","item","index","arr","inventory","update","where","updatedCustomer","destroy"],"mappings":";;;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,gBAAGA,SAArB;;IAEqBC,a;;;;;;;;;AAEjB;;;;;;;;;;gGASqBC,Y,EAAcC,a,EAAeC,oB,EAAsBC,Y;;;;;;sCAChE,CAACH,YAAD,IAAiB,CAACC,aAAlB,IAAmC,CAACC,oB;;;;;iEAC7B,EAACE,KAAK,4DAAN,EAAoEC,SAAS,CAA7E,E;;;;;uCAIYP,UAAUQ,MAAV,CAAiB;AAChCC,+CAAW,CADqB;AAEhCP,kDAAcA,YAFkB;AAGhCC,mDAAeA,aAHiB;AAIhCC,0DAAsBA,oBAJU;AAKhCC,kDAAcA;AALkB,iCAAjB,C;;;AAAfK,sC;iEAQG,EAACJ,KAAK,SAAN,EAAiBC,SAAS,CAA1B,EAA6BI,YAAYD,OAAOE,UAAP,CAAkBC,EAA3D,E;;;;;iEAGA,EAACP,KAAK,yDAAN,EAAiEC,SAAS,CAA1E,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;kGAIsBM,E;;;;;;oCACbA,E;;;;;kEACM,EAACP,KAAK,sBAAN,EAA8BC,SAAS,CAAvC,E;;;;uCAGQP,UAAUc,QAAV,CAAmBD,EAAnB,C;;;AAAfH,sC;;oCAEE,CAAC,CAACA,M;;;;;kEACG,EAACJ,KAAK,sCAAN,EAA8CS,UAAU,EAACF,IAAI,IAAL,EAAxD,EAAoEN,SAAS,CAA7E,E;;;kEAGJ,EAACD,KAAK,SAAN,EAAiBC,SAAS,CAA1B,EAA6BQ,UAAUL,OAAOE,UAA9C,E;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;;uCAMiCZ,UAAUgB,OAAV,E;;;AAArBC,4C;;sCAEAA,aAAaC,MAAb,IAAuB,C;;;;;kEAChB;AACHZ,yCAAK,sBADF;AAEHC,6CAAS;AAFN,iC;;;AAMPY,4C,GAAeF,aAAaG,GAAb,CAAiB,UAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AACtD,2CAAO;AACHC,mDAAWH,KAAKT,UADb;AAEHU,+CAAOA;AAFJ,qCAAP;AAIH,iCALkB,C;kEAOZ;AACHhB,yCAAK,SADF;AAEHC,6CAAS,CAFN;AAGHY,kDAAcA;AAHX,iC;;;;;kEAOA;AACHb,yCAAK,yDADF;AAEHC,6CAAS;AAFN,iC;;;;;;;;;;;;;;;;;AAQf;;;;;;;;;;;;kGAQyBM,E,EAAIX,Y,EAAcC,a,EAAeC,oB,EAAsBC,Y;;;;;;;;uCAG5CL,UAAUyB,MAAV,CAAiB;AACzCvB,kDAAcA,YAD2B;AAEzCC,mDAAeA,aAF0B;AAGzCC,0DAAsBA,oBAHmB;AAIzCC,kDAAcA;AAJ2B,iCAAjB,EAKzB;AACCqB,2CAAO;AACHb,4CAAIA;AADD;AADR,iCALyB,C;;;AAAxBc,+C;kEAUG,EAACrB,KAAK,SAAN,EAAiBC,SAAS,CAA1B,E;;;;;kEAEA,EAACD,KAAK,6DAAN,EAAqEC,SAAS,CAA9E,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;kGAIyBM,E;;;;;oCAChBA,E;;;;;kEACM,EAACP,KAAK,sBAAN,EAA8BC,SAAS,CAAvC,E;;;;;uCAIQP,UAAU4B,OAAV,CAAkB;AAC7BF,2CAAO;AACHb,4CAAIA;AADD;AADsB,iCAAlB,C;;;;;;;;kEAMR,K;;;;;;;;;;;;;;;;;;;;;kBAlIEZ,a","file":"CustomersBase.js","sourcesContent":["import db from '../../models/index';\r\n\r\nconst customers = db.customers;\r\n\r\nexport default class CustomersBase {\r\n\r\n    /**\r\n     * Create a new customer.\r\n     *\r\n     * Address parameter is created by AddressBase\r\n     * @param customerName\r\n     * @param customerPhone\r\n     * @param customerEmailAddress\r\n     * @param otherDetails\r\n     */\r\n    async createCustomer(customerName, customerPhone, customerEmailAddress, otherDetails) {\r\n        if (!customerName || !customerPhone || !customerEmailAddress) {\r\n            return {msg: 'There was an error with the customer information supplied.', payload: 1};\r\n        }\r\n\r\n        try {\r\n            let result = await customers.create({\r\n                addressId: 0,\r\n                customerName: customerName,\r\n                customerPhone: customerPhone,\r\n                customerEmailAddress: customerEmailAddress,\r\n                otherDetails: otherDetails\r\n            });\r\n\r\n            return {msg: 'Success', payload: 0, insertedId: result.dataValues.id};\r\n        }\r\n        catch (e) {\r\n            return {msg: 'An error occurred while trying to create a new customer', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a customer using an id.\r\n     * @param id\r\n     */\r\n    async getCustomerById(id) {\r\n        if (!id) {\r\n            return {msg: 'No id was specified.', payload: 1}\r\n        }\r\n\r\n        let result = await customers.findById(id);\r\n\r\n        if (!(!!result)) {\r\n            return {msg: 'No customer was found with that id..', customer: {id: null}, payload: 1};\r\n        }\r\n\r\n        return {msg: 'Success', payload: 0, customer: result.dataValues};\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all customers.\r\n     */\r\n    async getAllCustomers() {\r\n\r\n        try {\r\n            let allCustomers = await customers.findAll();\r\n\r\n            if (allCustomers.length <= 0) {\r\n                return {\r\n                    msg: 'No customers found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            let customerList = allCustomers.map((item, index, arr) => {\r\n                return {\r\n                    inventory: item.dataValues,\r\n                    index: index\r\n                };\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                customerList: customerList\r\n            }\r\n\r\n        } catch (e) {\r\n            return {\r\n                msg: 'An error occurred while trying to get the customer list',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates a customer.\r\n     * @param customerName\r\n     * @param customerPhone\r\n     * @param customerEmailAddress\r\n     * @param otherDetails\r\n     * @param id\r\n     */\r\n    async updateCustomerById(id, customerName, customerPhone, customerEmailAddress, otherDetails) {\r\n\r\n        try {\r\n            let updatedCustomer = await customers.update({\r\n                customerName: customerName,\r\n                customerPhone: customerPhone,\r\n                customerEmailAddress: customerEmailAddress,\r\n                otherDetails: otherDetails\r\n            }, {\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n            return {msg: 'Success', payload: 0};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while updating the inventory information.', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete's a customer using an id.\r\n     * @param id\r\n     */\r\n    async deleteCustomerById(id) {\r\n        if (!id) {\r\n            return {msg: 'No id was specified.', payload: 1}\r\n        }\r\n\r\n        try {\r\n            return !!await customers.destroy({\r\n                where: {\r\n                    id: id\r\n                }\r\n            })\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n}\r\n"]}
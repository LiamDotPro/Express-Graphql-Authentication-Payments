{"version":3,"sources":["../../../library/Passport/Passport.js"],"names":["require","config","auth","ConfiguredPassport","passport","ExtractJwt","JwtStrategy","Strategy","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","process","env","JWT_SECRET","strategy","jwt_payload","next","findAccountById","id","then","res","msg","adminStrategy","use"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEAA,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,OAAO,8BAAb;;IAEqBC,kB;AAEjB,kCAAc;AAAA;;AACV,aAAKC,QAAL;AACH;;;;4CAEmB;AAChB;AACA,gBAAIC,aAAa,sBAAYA,UAA7B;AACA,gBAAIC,cAAc,sBAAYC,QAA9B;;AAEA,gBAAIC,aAAa,EAAjB;AACAA,uBAAWC,cAAX,GAA4BJ,WAAWK,2BAAX,EAA5B;AACAF,uBAAWG,WAAX,GAAyBC,QAAQC,GAAR,CAAYC,UAArC;;AAEA,gBAAMC,WAAW,IAAIT,WAAJ,CAAgBE,UAAhB,EAA4B,UAAUQ,WAAV,EAAuBC,IAAvB,EAA6B;AACtEf,qBAAKgB,eAAL,CAAqBF,YAAYG,EAAjC,EAAqCC,IAArC,CAA0C,UAACC,GAAD,EAAS;AAC/C,wBAAIA,IAAIC,GAAJ,KAAY,SAAhB,EAA2B;AACvBL,6BAAK,IAAL,EAAWD,YAAYG,EAAvB;AACH,qBAFD,MAEO;AACHF,6BAAK,IAAL,EAAW,KAAX;AACH;AACJ,iBAND;AAOH,aARgB,CAAjB;;AAUA,gBAAMM,gBAAgB,IAAIjB,WAAJ,CAAgBE,UAAhB,EAA4B,UAAUQ,WAAV,EAAuBC,IAAvB,EAA6B;AAC3Ef,qBAAKgB,eAAL,CAAqBF,YAAYG,EAAjC,EAAqCC,IAArC,CAA0C,UAACC,GAAD,EAAS;AAC/C,wBAAIA,IAAIC,GAAJ,KAAY,SAAhB,EAA2B;AACvBL,6BAAK,IAAL,EAAWD,YAAYG,EAAvB;AACH,qBAFD,MAEO;AACHF,6BAAK,IAAL,EAAW,KAAX;AACH;AACJ,iBAND;AAOH,aARqB,CAAtB;;AAUA,iBAAKb,QAAL,CAAcoB,GAAd,CAAkB,KAAlB,EAAyBT,QAAzB;AACA,iBAAKX,QAAL,CAAcoB,GAAd,CAAkB,OAAlB,EAA2BD,aAA3B;AACH;;;;;;kBArCgBpB,kB","file":"Passport.js","sourcesContent":["import passportJWT from 'passport-jwt';\r\nimport Auth from '../Accounts/authentication';\r\nimport passport from 'passport';\r\n\r\nrequire('dotenv').config();\r\nconst auth = new Auth();\r\n\r\nexport default class ConfiguredPassport {\r\n\r\n    constructor() {\r\n        this.passport = passport;\r\n    }\r\n\r\n    configurePassport() {\r\n        // Passport Data\r\n        let ExtractJwt = passportJWT.ExtractJwt;\r\n        let JwtStrategy = passportJWT.Strategy;\r\n\r\n        let jwtOptions = {};\r\n        jwtOptions.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\r\n        jwtOptions.secretOrKey = process.env.JWT_SECRET;\r\n\r\n        const strategy = new JwtStrategy(jwtOptions, function (jwt_payload, next) {\r\n            auth.findAccountById(jwt_payload.id).then((res) => {\r\n                if (res.msg === 'success') {\r\n                    next(null, jwt_payload.id);\r\n                } else {\r\n                    next(null, false);\r\n                }\r\n            })\r\n        });\r\n\r\n        const adminStrategy = new JwtStrategy(jwtOptions, function (jwt_payload, next) {\r\n            auth.findAccountById(jwt_payload.id).then((res) => {\r\n                if (res.msg === 'success') {\r\n                    next(null, jwt_payload.id);\r\n                } else {\r\n                    next(null, false);\r\n                }\r\n            })\r\n        });\r\n\r\n        this.passport.use('jwt', strategy);\r\n        this.passport.use('admin', adminStrategy);\r\n    }\r\n}\r\n"]}
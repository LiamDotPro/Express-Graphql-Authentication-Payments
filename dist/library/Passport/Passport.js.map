{"version":3,"sources":["../../../library/Passport/Passport.js"],"names":["requireAuthenticated","require","config","auth","LocalStrategy","Strategy","ConfiguredPassport","passport","serializeUser","id","done","deserializeUser","strategy","usernameField","passwordField","email","password","validateUser","authResult","payload","message","user","use","req","res","next","isAuthenticated","redirect"],"mappings":";;;;;;;;QA6CgBA,oB,GAAAA,oB;;AA7ChB;;;;AACA;;;;;;;;;;AAEAC,QAAQ,QAAR,EAAkBC,MAAlB;AACA,IAAMC,OAAO,8BAAb;AACA,IAAMC,gBAAgBH,QAAQ,gBAAR,EAA0BI,QAAhD;;IAEqBC,kB;AAEjB,kCAAc;AAAA;;AACV,aAAKC,QAAL;AACH;;;;4CAEmB;AAAA;;AAEhB,iBAAKA,QAAL,CAAcC,aAAd,CAA4B,UAACC,EAAD,EAAKC,IAAL,EAAc;AACtCA,qBAAK,IAAL,EAAWD,EAAX;AACH,aAFD;;AAIA,iBAAKF,QAAL,CAAcI,eAAd,CAA8B,UAACF,EAAD,EAAKC,IAAL,EAAc;AACxCA,qBAAK,IAAL,EAAWD,EAAX;AACH,aAFD;;AAIA,gBAAIG,WAAW,IAAIR,aAAJ,CAAkB;AAC7BS,+BAAe,OADc;AAE7BC,+BAAe;AAFc,aAAlB;AAAA,mFAGZ,iBAAOC,KAAP,EAAcC,QAAd,EAAwBN,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAE4BP,KAAKc,YAAL,CAAkBF,KAAlB,EAAyBC,QAAzB,CAF5B;;AAAA;AAESE,8CAFT;;AAAA,0CAISA,WAAWC,OAAX,KAAuB,EAJhC;AAAA;AAAA;AAAA;;AAAA,qEAKgBT,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACU,SAAS,sCAAV,EAAlB,CALhB;;AAAA;AAAA,qEAQYV,KAAK,IAAL,EAAWQ,WAAWG,IAAX,CAAgBZ,EAA3B,CARZ;;AAAA;AAAA;AAAA;AAAA,qEAUYC,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACU,SAAS,2CAAV,EAAlB,CAVZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHY;;AAAA;AAAA;AAAA;AAAA,gBAAf;;AAiBA,iBAAKb,QAAL,CAAce,GAAd,CAAkB,OAAlB,EAA2BV,QAA3B;AACA;AACH;;;;;;kBAnCgBN,kB;AAsCd,SAASN,oBAAT,CAA8BuB,GAA9B,EAAmCC,GAAnC,EAAwCC,IAAxC,EAA8C;AACjD,QAAIF,IAAIG,eAAJ,EAAJ,EAA2B;AACvB,eAAOD,MAAP;AACH;;AAEDD,QAAIG,QAAJ,CAAa,GAAb,EAAkBF,IAAlB;AACH","file":"Passport.js","sourcesContent":["import Auth from '../Accounts/authentication';\r\nimport passport from 'passport';\r\n\r\nrequire('dotenv').config();\r\nconst auth = new Auth();\r\nconst LocalStrategy = require('passport-local').Strategy;\r\n\r\nexport default class ConfiguredPassport {\r\n\r\n    constructor() {\r\n        this.passport = passport;\r\n    }\r\n\r\n    configurePassport() {\r\n\r\n        this.passport.serializeUser((id, done) => {\r\n            done(null, id);\r\n        });\r\n\r\n        this.passport.deserializeUser((id, done) => {\r\n            done(null, id);\r\n        });\r\n\r\n        let strategy = new LocalStrategy({\r\n            usernameField: 'email',\r\n            passwordField: 'password'\r\n        }, async (email, password, done) => {\r\n            try {\r\n                let authResult = await auth.validateUser(email, password);\r\n\r\n                if (authResult.payload !== 11) {\r\n                    return done(null, false, {message: \"Incorrect email or password supplied\"});\r\n                }\r\n\r\n                return done(null, authResult.user.id);\r\n            } catch (e) {\r\n                return done(null, false, {message: \"An error occurred while trying to login..\"});\r\n            }\r\n        });\r\n\r\n        this.passport.use('local', strategy);\r\n        //this.passport.use('admin', adminStrategy);\r\n    }\r\n}\r\n\r\nexport function requireAuthenticated(req, res, next) {\r\n    if (req.isAuthenticated()) {\r\n        return next();\r\n    }\r\n\r\n    res.redirect('/', next);\r\n}\r\n"]}
{"version":3,"sources":["../../../library/Addresses/AddressesBase.js"],"names":["require","config","address","addresses","AddressesBase","customerId","line_1","line_2","line_3","city","town","postCode","county","houseNumber","isNaN","msg","payload","create","createdAddress","insertedId","dataValues","id","findAll","where","foundAddress","length","allAddresses","addressList","map","item","index","arr","update","updatedAddress","destroy"],"mappings":"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","file":"AddressesBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Products model\r\nconst address = db.addresses;\r\n\r\nexport default class AddressesBase {\r\n\r\n    /**\r\n     * Creates a new address record for a customer.\r\n     * @param customerId\r\n     * @param line_1\r\n     * @param line_2\r\n     * @param line_3\r\n     * @param city\r\n     * @param town\r\n     * @param postCode\r\n     * @param county\r\n     * @param houseNumber\r\n     */\r\n    async createAddressRecord(customerId, line_1, line_2, line_3, city, town, postCode, county, houseNumber) {\r\n\r\n        if (isNaN(customerId) && !customerId) {\r\n            return {msg: 'No product Identifier was passed.', payload: 1};\r\n        }\r\n\r\n        try {\r\n\r\n            let createdAddress = await address.create({\r\n                customerId: customerId,\r\n                line_1: line_1,\r\n                line_2: line_2,\r\n                line_3: line_3,\r\n                city: city,\r\n                town: town,\r\n                postCode: postCode,\r\n                county: county,\r\n                houseNumber: houseNumber\r\n            });\r\n\r\n            return {msg: 'Success', payload: 0, insertedId: createdAddress.dataValues.id};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to create a new inventory', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets an address record using an id.\r\n     * @param id\r\n     */\r\n    async getAddressById(id) {\r\n\r\n        if (!id) {\r\n            return {msg: 'No id specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            let foundAddress = await address.findAll({\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n\r\n            if (foundAddress.length <= 0) {\r\n                return {msg: 'No address record was found..', payload: 1};\r\n            }\r\n\r\n            return {msg: 'Success', payload: 0, address: foundAddress[0].dataValues};\r\n\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to retrieve a address..', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all avalible address records.\r\n     */\r\n    async getAllAddresses() {\r\n        try {\r\n            let allAddresses = await address.findAll();\r\n\r\n            if (allAddresses.length <= 0) {\r\n                return {\r\n                    msg: 'No addresses found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            let addressList = allAddresses.map((item, index, arr) => {\r\n                return {\r\n                    address: item.dataValues,\r\n                    index: index\r\n                };\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                addressList: addressList\r\n            }\r\n\r\n        } catch (e) {\r\n            return {\r\n                msg: 'An error occurred while trying to get the address list.',\r\n                payload: 1\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an address using an id.\r\n     * @param id\r\n     * @param line_1\r\n     * @param line_2\r\n     * @param line_3\r\n     * @param city\r\n     * @param town\r\n     * @param postCode\r\n     * @param county\r\n     * @param houseNumber\r\n     */\r\n    async updateAddressById(id, line_1, line_2, line_3, city, town, postCode, county, houseNumber) {\r\n        try {\r\n            let updatedAddress = await address.update({\r\n                line_1: line_1,\r\n                line_2: line_2,\r\n                line_3: line_3,\r\n                city: city,\r\n                town: town,\r\n                postCode: postCode,\r\n                county: county,\r\n                houseNumber: houseNumber\r\n            }, {\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n            return {msg: 'Success', payload: 0};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while updating the inventory information.', payload: 1};\r\n        }\r\n    }\r\n\r\n    /***\r\n     * delete's an address using an id.\r\n     * @param id\r\n     */\r\n    async deleteAddress(id) {\r\n\r\n        if (!id) {\r\n            return {msg: 'No id was specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            return !!await address.destroy({\r\n                where: {\r\n                    id: id\r\n                }\r\n            })\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]}
{"version":3,"sources":["../../../library/Inventories/InventoriesBase.js"],"names":["require","config","inventories","inventory","InventoriesBase","productIdentifer","available","sold","hold","onOrder","isNaN","msg","payload","create","createdInventory","insertedId","dataValues","id","update","where","updatedInventory","findAll","allInventories","length","inventoryList","map","item","index","arr","productId","destroy"],"mappings":"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","file":"InventoriesBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Products model\r\nconst inventories = db.inventory;\r\n\r\n\r\nexport default class InventoriesBase {\r\n\r\n    /**\r\n     * Creates a new instance of inventory.\r\n     * @param productIdentifer\r\n     * @param available\r\n     * @param sold\r\n     * @param hold\r\n     * @param onOrder\r\n     * @returns {Promise.<*>}\r\n     */\r\n    async createNewInventory(productIdentifer, available, sold, hold, onOrder) {\r\n\r\n        if (isNaN(productIdentifer)) {\r\n            return {msg: 'No product Identifier was passed.', payload: 1};\r\n        }\r\n\r\n        try {\r\n            let createdInventory = await inventories.create({\r\n                productIdentifer: productIdentifer,\r\n                available: available,\r\n                sold: sold,\r\n                hold: hold,\r\n                onOrder: onOrder\r\n            });\r\n\r\n            return {msg: 'Success', payload: 0, insertedId: createdInventory.dataValues.id};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to create a new inventory', payload: 1};\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates an inventory using an id.\r\n     * @param id\r\n     * @param productIdentifer\r\n     * @param available\r\n     * @param sold\r\n     * @param hold\r\n     * @param onOrder\r\n     */\r\n    async updateInventoryById(id, productIdentifer, available, sold, hold, onOrder) {\r\n\r\n        try {\r\n            let updatedInventory = await !!inventories.update({\r\n                productIdentifer: productIdentifer,\r\n                available: available,\r\n                sold: sold,\r\n                hold: hold,\r\n                onOrder: onOrder\r\n            }, {\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n\r\n            if (!updatedInventory) {\r\n                return {msg: 'The inventory was not able to be updated...', payload: 1};\r\n            }\r\n\r\n            return {msg: 'Success', payload: 0};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while updating the inventory information.', payload: 1};\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates an inventory using a productId.\r\n     * @param productIdentifer\r\n     * @param available\r\n     * @param sold\r\n     * @param hold\r\n     * @param onOrder\r\n     */\r\n    async updateInventoryByProductId(productIdentifer, available, sold, hold, onOrder) {\r\n\r\n        try {\r\n            let updatedInventory = await inventories.update({\r\n                available: available,\r\n                sold: sold,\r\n                hold: hold,\r\n                onOrder: onOrder\r\n            }, {\r\n                where: {\r\n                    productIdentifer: productIdentifer\r\n                }\r\n            });\r\n            return {msg: 'Success', payload: 0};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while updating the inventory information.', payload: 1};\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets all of the available inventory listings.\r\n     */\r\n    async getAllInventories() {\r\n\r\n        try {\r\n            let allInventories = await inventories.findAll();\r\n\r\n            if (allInventories.length <= 0) {\r\n                return {\r\n                    msg: 'No inventories found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            let inventoryList = allInventories.map((item, index, arr) => {\r\n                return {\r\n                    inventory: item.dataValues,\r\n                    index: index\r\n                };\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                inventoryList: inventoryList\r\n            }\r\n\r\n        } catch (e) {\r\n            return {\r\n                msg: 'An error occurred while trying to get the inventory list',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets an inventory using id.\r\n     * @param id\r\n     */\r\n    async getInventoryById(id) {\r\n\r\n        if (!id) {\r\n            return {msg: 'No id specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            let inventory = await inventories.findAll({\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n\r\n            if (inventory.length <= 0) {\r\n                return {msg: 'No inventory was found..', payload: 1};\r\n            }\r\n\r\n            return {msg: 'Success', payload: 0, inventory: inventory[0].dataValues};\r\n\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to retrieve a inventory..', payload: 1};\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets an inventory using the product Id.\r\n     * @param productId\r\n     */\r\n    async getInventoryByProductId(productId) {\r\n\r\n        if (!productId) {\r\n            return {msg: 'No product id specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            let inventory = await inventories.findAll({\r\n                where: {\r\n                    productIdentifer: productId\r\n                }\r\n            });\r\n\r\n            if (inventory.length <= 0) {\r\n                return {msg: 'No inventory was found..', payload: 1};\r\n            }\r\n\r\n            return {msg: 'Success', payload: 0, inventory: inventory[0].dataValues};\r\n\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to retrieve a inventory..', payload: 1};\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Deletes an inventory based on Id.\r\n     * @param id\r\n     */\r\n    async deleteInventoryById(id) {\r\n\r\n        if (!id) {\r\n            return {msg: 'No id specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            return !!await inventories.destroy({\r\n                where: {\r\n                    id: id\r\n                }\r\n            })\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Deletes an inventory based on product Id.\r\n     * @param productId\r\n     */\r\n    async deleteInventoryByProductId(productId) {\r\n\r\n        if (!productId) {\r\n            return {msg: 'No product identifier specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            return !!await inventories.destroy({\r\n                where: {\r\n                    productIdentifer: productId\r\n                }\r\n            })\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"]}
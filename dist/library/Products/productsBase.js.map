{"version":3,"sources":["../../../library/Products/productsBase.js"],"names":["require","config","products","product","productsBase","process","env","ENVIROMENT","new","target","TypeError","findAll","allProducts","length","msg","payload","productList","map","item","index","arr","id","dataValues","productName","productDesc","productThumbnail","productDispatchTime","productInventory","startSale","endSale","status","eligibleForDiscount","createdAt","where","console","log","name","description","thumbnail","dispatchTime","startSaleDate","endSaleDate","create","createdProduct","insertedId"],"mappings":";;;;;;;;AACA;;AAEA;;;;;;;;;;AAHAA,QAAQ,QAAR,EAAkBC,MAAlB;AAEA;;AAEA;AACA,IAAMC,WAAW,gBAAGC,OAApB;;IAEqBC,Y;AACjB,4BAAc;AAAA;;AACV,YAAIC,QAAQC,GAAR,CAAYC,UAAZ,KAA2B,YAA3B,IAA2CC,IAAIC,MAAJ,KAAeL,YAA9D,EAA4E;AACxE,kBAAM,IAAIM,SAAJ,CAAc,8CAAd,CAAN;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;uCAKgCR,SAASS,OAAT,E;;;AAApBC,2C;;sCAEAA,YAAYC,MAAZ,IAAsB,C;;;;;iEACf;AACHC,yCAAK,qBADF;AAEHC,6CAAS;AAFN,iC;;;AAMPC,2C,GAAcJ,YAAYK,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AACpD,2CAAO;AACHC,4CAAIH,KAAKI,UAAL,CAAgBD,EADjB;AAEHF,+CAAOA,KAFJ;AAGHI,qDAAaL,KAAKI,UAAL,CAAgBC,WAH1B;AAIHC,qDAAaN,KAAKI,UAAL,CAAgBE,WAJ1B;AAKHC,0DAAkBP,KAAKI,UAAL,CAAgBG,gBAL/B;AAMHC,6DAAqBR,KAAKI,UAAL,CAAgBI,mBANlC;AAOHC,0DAAkBT,KAAKI,UAAL,CAAgBK,gBAP/B;AAQHC,mDAAWV,KAAKI,UAAL,CAAgBM,SARxB;AASHC,iDAASX,KAAKI,UAAL,CAAgBO,OATtB;AAUHC,gDAAQZ,KAAKI,UAAL,CAAgBQ,MAVrB;AAWHC,6DAAqBb,KAAKI,UAAL,CAAgBS,mBAXlC;AAYHC,mDAAWd,KAAKI,UAAL,CAAgBU;AAZxB,qCAAP;AAcH,iCAfiB,C;iEAiBX;AACHlB,yCAAK,SADF;AAEHC,6CAAS,CAFN;AAGHC,iDAAaA;AAHV,iC;;;;;iEAMA;AACHF,yCAAK,yDADF;AAEHC,6CAAS;AAFN,iC;;;;;;;;;;;;;;;;;AAOf;;;;;;;;kGAIqBM,E;;;;;;;uCACGnB,SAASS,OAAT,CAAiB;AACjCsB,2CAAO;AACHZ,4CAAIA;AADD;AAD0B,iCAAjB,C;;;AAAhBlB,uC;;sCAMAA,QAAQU,MAAR,IAAkB,C;;;;;kEACX;AACHC,yCAAK,wBADF;AAEHC,6CAAS;AAFN,iC;;;;AAMXmB,wCAAQC,GAAR,CAAYhC,OAAZ;;;;;;;;;;;;;;;;;AAGJ;;;;;;;;;;;;;;;;;;;kGAeoBiC,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcT,M,EAAQC,mB,EAAqBJ,gB,EAAkBa,a,EAAeC,W;;;;;;;;uCAE3FvC,SAASwC,MAAT,CAAgB;AACvCnB,iDAAaa,IAD0B;AAEvCZ,iDAAaa,WAF0B;AAGvCZ,sDAAkBa,SAHqB;AAIvCZ,yDAAqBa,YAJkB;AAKvCT,4CAAQA,MAL+B;AAMvCC,yDAAqBA,mBANkB;AAOvCJ,sDAAkBA,gBAPqB;AAQvCC,+CAAWY,aAR4B;AASvCX,6CAASY;AAT8B,iCAAhB,C;;;AAAvBE,8C;kEAYG,EAAC7B,KAAK,SAAN,EAAiBC,SAAS,CAA1B,EAA6B6B,YAAYD,eAAerB,UAAf,CAA0BD,EAAnE,E;;;;;;AAEPa,wCAAQC,GAAR;kEACO,EAACrB,KAAK,wDAAN,EAAgEC,SAAS,CAAzE,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;;;;;;;;;;kGAawBM,E,EAAIe,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcT,M,EAAQC,mB,EAAqBJ,gB,EAAkBa,a,EAAeC,W;;;;;;;;;;;;;;;;;;;AAItI;;;;;;;;;kGAKoBpB,E;;;;;;;;;;;;;;;;;;;;;;;kBAlIHjB,Y","file":"productsBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Products model\r\nconst products = db.product;\r\n\r\nexport default class productsBase {\r\n    constructor() {\r\n        if (process.env.ENVIROMENT === 'production' && new.target === productsBase) {\r\n            throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all products from the database.\r\n     */\r\n    async getAllProducts() {\r\n        try {\r\n            let allProducts = await products.findAll();\r\n\r\n            if (allProducts.length <= 0) {\r\n                return {\r\n                    msg: 'No products found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            let productList = allProducts.map((item, index, arr) => {\r\n                return {\r\n                    id: item.dataValues.id,\r\n                    index: index,\r\n                    productName: item.dataValues.productName,\r\n                    productDesc: item.dataValues.productDesc,\r\n                    productThumbnail: item.dataValues.productThumbnail,\r\n                    productDispatchTime: item.dataValues.productDispatchTime,\r\n                    productInventory: item.dataValues.productInventory,\r\n                    startSale: item.dataValues.startSale,\r\n                    endSale: item.dataValues.endSale,\r\n                    status: item.dataValues.status,\r\n                    eligibleForDiscount: item.dataValues.eligibleForDiscount,\r\n                    createdAt: item.dataValues.createdAt\r\n                };\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                productList: productList\r\n            }\r\n        } catch (e) {\r\n            return {\r\n                msg: 'An error occurred while trying to get the products list',\r\n                payload: 1\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a specific product by it's Unique Identifier.\r\n     * @param id\r\n     */\r\n    async getProductById(id) {\r\n        let product = await products.findAll({\r\n            where: {\r\n                id: id\r\n            }\r\n        });\r\n\r\n        if (product.length <= 0) {\r\n            return {\r\n                msg: 'No product was found..',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n        console.log(product);\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of product.\r\n     *\r\n     * status: 0 draft, 1 live\r\n     *\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param productInventory\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     */\r\n    async createProduct(name, description, thumbnail, dispatchTime, status, eligibleForDiscount, productInventory, startSaleDate, endSaleDate) {\r\n        try {\r\n            let createdProduct = await products.create({\r\n                productName: name,\r\n                productDesc: description,\r\n                productThumbnail: thumbnail,\r\n                productDispatchTime: dispatchTime,\r\n                status: status,\r\n                eligibleForDiscount: eligibleForDiscount,\r\n                productInventory: productInventory,\r\n                startSale: startSaleDate,\r\n                endSale: endSaleDate\r\n            });\r\n\r\n            return {msg: 'Success', payload: 0, insertedId: createdProduct.dataValues.id};\r\n        } catch (e) {\r\n            console.log(e);\r\n            return {msg: 'An error occurred while trying to create a new product', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update information about a product.\r\n     * @param id\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param productInventory\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     */\r\n    async updateProductById(id, name, description, thumbnail, dispatchTime, status, eligibleForDiscount, productInventory, startSaleDate, endSaleDate) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Soft delete a product.\r\n     * @param id\r\n     * @returns {Promise<void>}\r\n     */\r\n    async deleteProduct(id) {\r\n\r\n    }\r\n}\r\n"]}
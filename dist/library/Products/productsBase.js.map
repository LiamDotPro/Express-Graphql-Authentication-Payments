{"version":3,"sources":["../../../library/Products/productsBase.js"],"names":["require","config","products","product","productsBase","process","env","ENVIROMENT","new","target","TypeError","findAll","allProducts","length","msg","payload","productList","map","item","index","arr","dataValues","id","where","name","description","thumbnail","dispatchTime","status","eligibleForDiscount","productInventory","startSaleDate","endSaleDate","create","productName","productDesc","productThumbnail","productDispatchTime","startSale","endSale","createdProduct","insertedId","console","log","destroy"],"mappings":";;;;;;;;AACA;;AAEA;;;;;;;;;;AAHAA,QAAQ,QAAR,EAAkBC,MAAlB;AAEA;;AAEA;AACA,IAAMC,WAAW,gBAAGC,OAApB;;IAEqBC,Y;AACjB,4BAAc;AAAA;;AACV,YAAIC,QAAQC,GAAR,CAAYC,UAAZ,KAA2B,YAA3B,IAA2CC,IAAIC,MAAJ,KAAeL,YAA9D,EAA4E;AACxE,kBAAM,IAAIM,SAAJ,CAAc,8CAAd,CAAN;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;uCAKgCR,SAASS,OAAT,E;;;AAApBC,2C;;sCAEAA,YAAYC,MAAZ,IAAsB,C;;;;;iEACf;AACHC,yCAAK,qBADF;AAEHC,6CAAS;AAFN,iC;;;AAMPC,2C,GAAcJ,YAAYK,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AACpD,2CAAO;AACHjB,iDAASe,KAAKG,UADX;AAEHF,+CAAOA;AAFJ,qCAAP;AAIH,iCALiB,C;iEAOX;AACHL,yCAAK,SADF;AAEHC,6CAAS,CAFN;AAGHC,iDAAaA;AAHV,iC;;;;;iEAMA;AACHF,yCAAK,yDADF;AAEHC,6CAAS;AAFN,iC;;;;;;;;;;;;;;;;;AAOf;;;;;;;;kGAIqBO,E;;;;;;;uCACGpB,SAASS,OAAT,CAAiB;AACjCY,2CAAO;AACHD,4CAAIA;AADD;AAD0B,iCAAjB,C;;;AAAhBnB,uC;;sCAMAA,QAAQU,MAAR,IAAkB,C;;;;;kEACX;AACHC,yCAAK,wBADF;AAEHC,6CAAS;AAFN,iC;;;kEAMJ,EAACD,KAAK,SAAN,EAAiBC,SAAS,CAA1B,EAA6BZ,SAASA,QAAQ,CAAR,EAAWkB,UAAjD,E;;;;;;;;;;;;;;;;;AAGX;;;;;;;;;;;;;;;;;;;kGAeoBG,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcC,M,EAAQC,mB,EAAqBC,gB,EAAkBC,a,EAAeC,W;;;;;;;;uCAE3F9B,SAAS+B,MAAT,CAAgB;AACvCC,iDAAaV,IAD0B;AAEvCW,iDAAaV,WAF0B;AAGvCW,sDAAkBV,SAHqB;AAIvCW,yDAAqBV,YAJkB;AAKvCC,4CAAQA,MAL+B;AAMvCC,yDAAqBA,mBANkB;AAOvCC,sDAAkBA,gBAPqB;AAQvCQ,+CAAWP,aAR4B;AASvCQ,6CAASP;AAT8B,iCAAhB,C;;;AAAvBQ,8C;kEAYG,EAAC1B,KAAK,SAAN,EAAiBC,SAAS,CAA1B,EAA6B0B,YAAYD,eAAenB,UAAf,CAA0BC,EAAnE,E;;;;;;AAEPoB,wCAAQC,GAAR;kEACO,EAAC7B,KAAK,wDAAN,EAAgEC,SAAS,CAAzE,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;;;;;;;;;;kGAawBO,E,EAAIE,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcC,M,EAAQC,mB,EAAqBC,gB,EAAkBC,a,EAAeC,W;;;;;;;;;;;;;;;;;;;AAMtI;;;;;;;;kGAIoBV,E;;;;;oCAEXA,E;;;;;kEACM,EAACR,KAAK,mBAAN,EAA2BC,SAAS,CAApC,E;;;;;uCAIQb,SAAS0C,OAAT,CAAiB;AAC5BrB,2CAAO;AACHD,4CAAIA;AADD;AADqB,iCAAjB,C;;;;;;;;kEAMR,K;;;;;;;;;;;;;;;;;;;;;kBAtIElB,Y","file":"productsBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Products model\r\nconst products = db.product;\r\n\r\nexport default class productsBase {\r\n    constructor() {\r\n        if (process.env.ENVIROMENT === 'production' && new.target === productsBase) {\r\n            throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all products from the database.\r\n     */\r\n    async getAllProducts() {\r\n        try {\r\n            let allProducts = await products.findAll();\r\n\r\n            if (allProducts.length <= 0) {\r\n                return {\r\n                    msg: 'No products found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            let productList = allProducts.map((item, index, arr) => {\r\n                return {\r\n                    product: item.dataValues,\r\n                    index: index\r\n                };\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                productList: productList\r\n            }\r\n        } catch (e) {\r\n            return {\r\n                msg: 'An error occurred while trying to get the products list',\r\n                payload: 1\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a specific product by it's Unique Identifier.\r\n     * @param id\r\n     */\r\n    async getProductById(id) {\r\n        let product = await products.findAll({\r\n            where: {\r\n                id: id\r\n            }\r\n        });\r\n\r\n        if (product.length <= 0) {\r\n            return {\r\n                msg: 'No product was found..',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n        return {msg: 'Success', payload: 0, product: product[0].dataValues};\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of product.\r\n     *\r\n     * status: 0 draft, 1 live\r\n     *\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param productInventory\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     */\r\n    async createProduct(name, description, thumbnail, dispatchTime, status, eligibleForDiscount, productInventory, startSaleDate, endSaleDate) {\r\n        try {\r\n            let createdProduct = await products.create({\r\n                productName: name,\r\n                productDesc: description,\r\n                productThumbnail: thumbnail,\r\n                productDispatchTime: dispatchTime,\r\n                status: status,\r\n                eligibleForDiscount: eligibleForDiscount,\r\n                productInventory: productInventory,\r\n                startSale: startSaleDate,\r\n                endSale: endSaleDate\r\n            });\r\n\r\n            return {msg: 'Success', payload: 0, insertedId: createdProduct.dataValues.id};\r\n        } catch (e) {\r\n            console.log(e);\r\n            return {msg: 'An error occurred while trying to create a new product', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update information about a product.\r\n     * @param id\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param productInventory\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     */\r\n    async updateProductById(id, name, description, thumbnail, dispatchTime, status, eligibleForDiscount, productInventory, startSaleDate, endSaleDate) {\r\n\r\n        \r\n\r\n    }\r\n\r\n    /**\r\n     * Soft delete a product.\r\n     * @param id\r\n     */\r\n    async deleteProduct(id) {\r\n\r\n        if (!id) {\r\n            return {msg: 'No Id specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n            return !!await products.destroy({\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n}\r\n"]}
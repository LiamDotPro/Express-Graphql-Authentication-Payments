{"version":3,"sources":["../../../library/Products/productsBase.js"],"names":["require","config","products","productsBase","process","env","ENVIROMENT","new","target","TypeError","name","description","thumbnail","dispatchTime","status","eligibleForDiscount","productInventory","startSaleDate","endSaleDate","id"],"mappings":";;;;;;;;AACA;;AAEA;;;;;;;;;;AAHAA,QAAQ,QAAR,EAAkBC,MAAlB;AAEA;;AAEA;AACA,IAAMC,WAAW,gBAAGA,QAApB;;IAEqBC,Y;AACjB,4BAAc;AAAA;;AACV,YAAIC,QAAQC,GAAR,CAAYC,UAAZ,KAA2B,YAA3B,IAA2CC,IAAIC,MAAJ,KAAeL,YAA9D,EAA4E;AACxE,kBAAM,IAAIM,SAAJ,CAAc,8CAAd,CAAN;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;kGAaoBC,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcC,M,EAAQC,mB,EAAqBC,gB,EAAkBC,a,EAAeC,W;;;;;;;;;;;;;;;;;;;AAI9H;;;;;;;;;;;;;;;;;;kGAcwBC,E,EAAIT,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcC,M,EAAQC,mB,EAAqBC,gB,EAAkBC,a,EAAeC,W;;;;;;;;;;;;;;;;;;;AAItI;;;;;;;;;kGAKoBC,E;;;;;;;;;;;;;;;;;;;;;;;kBA/DHhB,Y","file":"productsBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Products model\r\nconst products = db.products;\r\n\r\nexport default class productsBase {\r\n    constructor() {\r\n        if (process.env.ENVIROMENT === 'production' && new.target === productsBase) {\r\n            throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all products from the database.\r\n     * @returns {Promise<void>}\r\n     */\r\n    async getAllProducts() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets a specific product by it's Unique Identifier.\r\n     * @returns {Promise<void>}\r\n     */\r\n    async getProductById() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of product.\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param productInventory\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     * @returns {Promise<void>}\r\n     */\r\n    async createProduct(name, description, thumbnail, dispatchTime, status, eligibleForDiscount, productInventory, startSaleDate, endSaleDate) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Update information about a product.\r\n     * @param id\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param productInventory\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     * @returns {Promise<void>}\r\n     */\r\n    async updateProductById(id, name, description, thumbnail, dispatchTime, status, eligibleForDiscount, productInventory, startSaleDate, endSaleDate) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Soft delete a product.\r\n     * @param id\r\n     * @returns {Promise<void>}\r\n     */\r\n    async deleteProduct(id) {\r\n\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../library/Products/productsBase.js"],"names":["require","config","products","product","inventories","productsBase","process","env","ENVIROMENT","new","target","TypeError","findAll","allProducts","length","msg","payload","productList","map","item","index","arr","dataValues","id","where","name","description","thumbnail","dispatchTime","status","eligibleForDiscount","startSaleDate","endSaleDate","create","productName","productDesc","productThumbnail","productDispatchTime","startSale","endSale","createdProduct","createNewInventory","resultInventory","insertedId","page","findAndCountAll","then","data","count","limit","pages","Math","ceil","offset","order","resultObjects","outputProducts","update","updatedProduct","destroy","productDestroyResult","deleteInventoryByProductId","inventoryDestory"],"mappings":";;;;;;;;AACA;;AAEA;;;;AACA;;;;;;;;;;AAJAA,QAAQ,QAAR,EAAkBC,MAAlB;AAEA;;AAGA;AACA,IAAMC,WAAW,gBAAGC,OAApB;AACA,IAAMC,cAAc,+BAApB;;IAEqBC,Y;AACjB,4BAAc;AAAA;;AACV,YAAIC,QAAQC,GAAR,CAAYC,UAAZ,KAA2B,YAA3B,IAA2CC,IAAIC,MAAJ,KAAeL,YAA9D,EAA4E;AACxE,kBAAM,IAAIM,SAAJ,CAAc,8CAAd,CAAN;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;uCAKgCT,SAASU,OAAT,E;;;AAApBC,2C;;sCAEAA,YAAYC,MAAZ,IAAsB,C;;;;;iEACf;AACHC,yCAAK,qBADF;AAEHC,6CAAS;AAFN,iC;;;AAMPC,2C,GAAcJ,YAAYK,GAAZ,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AACpD,2CAAO;AACHlB,iDAASgB,KAAKG,UADX;AAEHF,+CAAOA;AAFJ,qCAAP;AAIH,iCALiB,C;iEAOX;AACHL,yCAAK,SADF;AAEHC,6CAAS,CAFN;AAGHC,iDAAaA;AAHV,iC;;;;;iEAMA;AACHF,yCAAK,yDADF;AAEHC,6CAAS;AAFN,iC;;;;;;;;;;;;;;;;;AAOf;;;;;;;;kGAIqBO,E;;;;;;;;uCAEOrB,SAASU,OAAT,CAAiB;AACjCY,2CAAO;AACHD,4CAAIA;AADD;AAD0B,iCAAjB,C;;;AAAhBpB,uC;;sCAMAA,QAAQW,MAAR,IAAkB,C;;;;;kEACX;AACHC,yCAAK,wBADF;AAEHC,6CAAS;AAFN,iC;;;kEAMJ,EAACD,KAAK,SAAN,EAAiBC,SAAS,CAA1B,EAA6Bb,SAASA,QAAQ,CAAR,EAAWmB,UAAjD,E;;;;;kEAEA,EAACP,KAAK,wDAAN,EAAgEC,SAAS,CAAzE,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;;;;;;;;;;;kGAcoBS,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcC,M,EAAQC,mB,EAAqBC,a,EAAeC,W;;;;;;;;uCAGzE9B,SAAS+B,MAAT,CAAgB;AACvCC,iDAAaT,IAD0B;AAEvCU,iDAAaT,WAF0B;AAGvCU,sDAAkBT,SAHqB;AAIvCU,yDAAqBT,YAJkB;AAKvCC,4CAAQA,MAL+B;AAMvCC,yDAAqBA,mBANkB;AAOvCQ,+CAAWP,aAP4B;AAQvCQ,6CAASP;AAR8B,iCAAhB,C;;;AAAvBQ,8C;;uCAYwBpC,YAAYqC,kBAAZ,CAA+BD,eAAelB,UAAf,CAA0BC,EAAzD,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,CAAnE,EAAsE,CAAtE,C;;;AAAxBmB,+C;kEAEG;AACH3B,yCAAK,SADF;AAEHC,6CAAS,CAFN;AAGH2B,gDAAYH,eAAelB,UAAf,CAA0BC,EAHnC;AAIHmB,qDAAiBA,gBAAgBC;AAJ9B,iC;;;;;kEAOA,EAAC5B,KAAK,wDAAN,EAAgEC,SAAS,CAAzE,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;;kGAK8B4B,I;;;;;;;;uCAEJ1C,SAAS2C,eAAT,GAA2BC,IAA3B,CAAgC,UAACC,IAAD,EAAU;AACxD,2CAAOA,KAAKC,KAAZ;AACH,iCAFiB,C;;;AAAdA,qC;AAIEC,qC,GAAQ,E;AAEVC,qC,GAAQC,KAAKC,IAAL,CAAUJ,QAAQC,KAAlB,C;AACRI,sC,GAASJ,SAASL,OAAO,CAAhB,C;;uCAEa1C,SAASU,OAAT,CAAiB;AACvC0C,2CAAO,CACH,CAAC,IAAD,EAAO,MAAP,CADG,CADgC;AAIvCL,2CAAOA,KAJgC;AAKvCI,4CAAQA;AAL+B,iCAAjB,C;;;AAAtBE,6C;;sCAQAA,cAAczC,MAAd,IAAwB,C;;;;;kEACjB,EAACC,KAAK,gCAAN,EAAwCC,SAAS,CAAjD,E;;;AAGPwC,8C,GAAiBD,cAAcrC,GAAd,CAAkB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACpD,2CAAOD,KAAKG,UAAZ;AACH,iCAFoB,C;kEAId;AACHP,yCAAK,SADF;AAEHC,6CAAS,CAFN;AAGHkC,2CAAOA,KAHJ;AAIHF,2CAAOA,KAJJ;AAKH9C,8CAAUsD;AALP,iC;;;;;kEAQA,EAACzC,KAAK,kEAAN,EAA0EC,SAAS,CAAnF,E;;;;;;;;;;;;;;;;;AAIf;;;;;;;;;;;;;;;;kGAYwBO,E,EAAIE,I,EAAMC,W,EAAaC,S,EAAWC,Y,EAAcC,M,EAAQC,mB,EAAqBC,a,EAAeC,W;;;;;;;;uCAEjF,CAAC,CAAC9B,SAASuD,MAAT,CAAgB;AACrCvB,iDAAaT,IADwB;AAErCU,iDAAaT,WAFwB;AAGrCU,sDAAkBT,SAHmB;AAIrCU,yDAAqBT,YAJgB;AAKrCC,4CAAQA,MAL6B;AAMrCC,yDAAqBA,mBANgB;AAOrCQ,+CAAWP,aAP0B;AAQrCQ,6CAASP;AAR4B,iCAAhB,EAUzB;AACIR,2CAAO;AACHD,4CAAIA;AADD;AADX,iCAVyB,C;;;AAAzBmC,8C;;oCAgBCA,c;;;;;kEACM,EAAC3C,KAAK,yCAAN,EAAiDC,SAAS,CAA1D,E;;;kEAGJ,EAACD,KAAK,SAAN,EAAiBC,SAAS,CAA1B,E;;;;;kEAEA,EAACD,KAAK,2DAAN,EAAmEC,SAAS,CAA5E,E;;;;;;;;;;;;;;;;;AAKf;;;;;;;;kGAIoBO,E;;;;;;oCAEXA,E;;;;;kEACM,EAACR,KAAK,mBAAN,EAA2BC,SAAS,CAApC,E;;;;;uCAK4Bd,SAASyD,OAAT,CAAiB;AAChDnC,2CAAO;AACHD,4CAAIA;AADD;AADyC,iCAAjB,C;;;AAA/BqC,oD;;oCAMCA,oB;;;;;kEACM,EAAC7C,KAAK,8BAAN,EAAsCC,SAAS,CAA/C,E;;;;uCAGkBZ,YAAYyD,0BAAZ,CAAuCtC,EAAvC,C;;;AAAzBuC,gD;;oCAECA,gB;;;;;kEACM,EAAC/C,KAAK,kCAAN,EAA0CC,SAAS,CAAnD,E;;;kEAEJ,I;;;;;kEAEA,K;;;;;;;;;;;;;;;;;AAKf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAnOiBX,Y","file":"productsBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\n// Database Class.\r\nimport db from '../../models/index';\r\nimport Inventories from '../Inventories/InventoriesBase';\r\n// Products model\r\nconst products = db.product;\r\nconst inventories = new Inventories();\r\n\r\nexport default class productsBase {\r\n    constructor() {\r\n        if (process.env.ENVIROMENT === 'production' && new.target === productsBase) {\r\n            throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all products from the database.\r\n     */\r\n    async getAllProducts() {\r\n        try {\r\n            let allProducts = await products.findAll();\r\n\r\n            if (allProducts.length <= 0) {\r\n                return {\r\n                    msg: 'No products found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            let productList = allProducts.map((item, index, arr) => {\r\n                return {\r\n                    product: item.dataValues,\r\n                    index: index\r\n                };\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                productList: productList\r\n            }\r\n        } catch (e) {\r\n            return {\r\n                msg: 'An error occurred while trying to get the products list',\r\n                payload: 1\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a specific product by it's Unique Identifier.\r\n     * @param id\r\n     */\r\n    async getProductById(id) {\r\n        try {\r\n            let product = await products.findAll({\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n\r\n            if (product.length <= 0) {\r\n                return {\r\n                    msg: 'No product was found..',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            return {msg: 'Success', payload: 0, product: product[0].dataValues};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to retrieve a product..', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of product.\r\n     *\r\n     * Also creates an instance of inventory.\r\n     *\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     */\r\n    async createProduct(name, description, thumbnail, dispatchTime, status, eligibleForDiscount, startSaleDate, endSaleDate) {\r\n\r\n        try {\r\n            let createdProduct = await products.create({\r\n                productName: name,\r\n                productDesc: description,\r\n                productThumbnail: thumbnail,\r\n                productDispatchTime: dispatchTime,\r\n                status: status,\r\n                eligibleForDiscount: eligibleForDiscount,\r\n                startSale: startSaleDate,\r\n                endSale: endSaleDate\r\n            });\r\n\r\n            // Create an inventory using the product identifier.\r\n            let resultInventory = await inventories.createNewInventory(createdProduct.dataValues.id, 0, 0, 0, 0);\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                insertedId: createdProduct.dataValues.id,\r\n                resultInventory: resultInventory.insertedId\r\n            };\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying to create a new product', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a paginated partial view of the products catalog.\r\n     * @todo Needs further testing to assure that pagination works as intended.\r\n     * @param page\r\n     */\r\n    async getProductsByPagination(page) {\r\n        try {\r\n            let count = await products.findAndCountAll().then((data) => {\r\n                return data.count;\r\n            });\r\n\r\n            const limit = 50;\r\n\r\n            let pages = Math.ceil(count / limit);\r\n            let offset = limit * (page - 1);\r\n\r\n            let resultObjects = await products.findAll({\r\n                order: [\r\n                    ['id', 'DESC']\r\n                ],\r\n                limit: limit,\r\n                offset: offset\r\n            });\r\n\r\n            if (resultObjects.length <= 0) {\r\n                return {msg: 'There was no products found...', payload: 1};\r\n            }\r\n\r\n            let outputProducts = resultObjects.map((item, index) => {\r\n                return item.dataValues;\r\n            });\r\n\r\n            return {\r\n                msg: 'Success',\r\n                payload: 0,\r\n                pages: pages,\r\n                count: count,\r\n                products: outputProducts\r\n            };\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while trying get a set of paginated products..', payload: 1};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update information about a product.\r\n     * @param id\r\n     * @param name\r\n     * @param description\r\n     * @param thumbnail\r\n     * @param dispatchTime\r\n     * @param status\r\n     * @param eligibleForDiscount\r\n     * @param startSaleDate\r\n     * @param endSaleDate\r\n     */\r\n    async updateProductById(id, name, description, thumbnail, dispatchTime, status, eligibleForDiscount, startSaleDate, endSaleDate) {\r\n        try {\r\n            let updatedProduct = await !!products.update({\r\n                    productName: name,\r\n                    productDesc: description,\r\n                    productThumbnail: thumbnail,\r\n                    productDispatchTime: dispatchTime,\r\n                    status: status,\r\n                    eligibleForDiscount: eligibleForDiscount,\r\n                    startSale: startSaleDate,\r\n                    endSale: endSaleDate\r\n                },\r\n                {\r\n                    where: {\r\n                        id: id\r\n                    }\r\n                });\r\n\r\n            if (!updatedProduct) {\r\n                return {msg: 'The product was not able to be updated.', payload: 1};\r\n            }\r\n\r\n            return {msg: 'Success', payload: 0};\r\n        } catch (e) {\r\n            return {msg: 'An error occurred while updating the product information.', payload: 1};\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Soft delete a product.\r\n     * @param id\r\n     */\r\n    async deleteProduct(id) {\r\n\r\n        if (!id) {\r\n            return {msg: 'No id specified..', payload: 1};\r\n        }\r\n\r\n        try {\r\n\r\n            let productDestroyResult = !!await products.destroy({\r\n                where: {\r\n                    id: id\r\n                }\r\n            });\r\n\r\n            if (!productDestroyResult) {\r\n                return {msg: 'Product could not be deleted', payload: 1};\r\n            }\r\n\r\n            let inventoryDestory = await inventories.deleteInventoryByProductId(id);\r\n\r\n            if (!inventoryDestory) {\r\n                return {msg: 'Inventory could not be deleted..', payload: 1};\r\n            }\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets Products including a join to inventory\r\n     */\r\n    async getProductsWithInventoryAttached() {\r\n\r\n    }\r\n\r\n    async uploadProductThumbnail() {\r\n\r\n    }\r\n\r\n    async uploadProductImages() {\r\n\r\n    }\r\n\r\n}\r\n"]}
{"version":3,"sources":["../../../library/Accounts/authenticationBase.js"],"names":["require","config","authenticationBase","process","env","ENVIROMENT","new","target","TypeError","password","saltRounds","hash","then","email","using","connection","query","toLowerCase","_res","length","comparePasswords","u_password","res","msg","payload","user","id","plainText","compare","text","re","test","checkIfEmailInString","catch","e","console","log","name","fullName","u_email","getUserPasswordHashWithEmail","hasOwnProperty","bool","userID","encryptPassword","status","message"],"mappings":"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","file":"authenticationBase.js","sourcesContent":["require('dotenv').config();\r\n\r\nimport getSqlConnection from '../../db/db';\r\nimport Promise from 'bluebird';\r\nimport bcrypt from 'bcrypt';\r\n\r\n/**\r\n * Abstract class that acts as the concrete functions for our registering api.\r\n */\r\nexport default class authenticationBase {\r\n\r\n    constructor() {\r\n        if (process.env.ENVIROMENT === 'production') {\r\n            if (new.target === authenticationBase) {\r\n                throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encrypts plain text passwords using a safe encryption method.\r\n     * @param password String\r\n     */\r\n    encryptPassword(password) {\r\n        const saltRounds = 10;\r\n\r\n        return bcrypt.hash(password, saltRounds).then(function (hash) {\r\n            return hash;\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Validates a user from within the database.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    validateUser(email, password) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('Select id, u_email, u_password FROM `accounts` Where userName=?', [email.toLowerCase()]).then((_res) => {\r\n                // Check if we have that account.\r\n                if (_res.length > 0) {\r\n                    return this.comparePasswords(_res[0].u_password, password).then((res) => {\r\n                        if (res) {\r\n                            return {\r\n                                msg: 'Success',\r\n                                payload: 11,\r\n                                user: {\r\n                                    id: _res[0].id\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return {\r\n                                msg: 'Fail',\r\n                                payload: 1\r\n                            }\r\n                        }\r\n                    })\r\n                } else {\r\n                    return {\r\n                        msg: 'Fail',\r\n                        payload: 1\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This does a simple bcrypt comparision to identify correctness.\r\n     * @param hash\r\n     * @param plainText\r\n     */\r\n    comparePasswords(hash, plainText) {\r\n        return bcrypt.compare(plainText, hash).then((res) => {\r\n            return res === true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks to make sure an email is present within a string.\r\n     * @param text\r\n     * @returns {boolean}\r\n     */\r\n    checkIfEmailInString(text) {\r\n        let re = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\r\n        return re.test(text);\r\n    }\r\n\r\n    /**\r\n     * This checks for a duplicate account inside the database.\r\n     * Payload is a boolean Int\r\n     */\r\n    checkForDuplicateAccount(email) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n\r\n            if (email.length < 5 || !this.checkIfEmailInString(email)) {\r\n                return {\r\n                    msg: 'Fail - No Email Found',\r\n                    payload: 1\r\n                }\r\n            }\r\n\r\n            return connection.query('SELECT `u_email` FROM `accounts` WHERE u_email=?', [email.toLowerCase()]).then((res) => {\r\n                if (res.length === 0) {\r\n                    return {\r\n                        msg: 'Success',\r\n                        payload: 0\r\n                    }\r\n                } else {\r\n                    return {\r\n                        msg: 'Fail - Duplicate Account',\r\n                        payload: 1\r\n                    }\r\n                }\r\n            }).catch((e) => {\r\n                console.log(e);\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Find Account by Id\r\n     */\r\n    findAccountById(id) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('SELECT id, u_email FROM `accounts` WHERE id=?', [id]).then((res) => {\r\n                if (res.length > 0) {\r\n                    return {\r\n                        name: res[0].fullName,\r\n                        email: res[0].u_email,\r\n                        msg: 'success'\r\n                    };\r\n                } else {\r\n                    return false;\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This is the last part of the system.\r\n     * All passwords should be ran through bcrypt before being inserted.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    createAccount(email, password) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('INSERT INTO `accounts` (u_email, u_password, accountType) VALUES (?, ?, 1)', [email.toLowerCase(), password]).then((res) => {\r\n                return {msg: 'Success', payload: 10}\r\n            })\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Permanently removes an account from the system.\r\n     *\r\n     * Usage of this method should be heavily guarded as it is a standardized method that provides only base functionality with no security.\r\n     */\r\n    deleteAccount(email, password) {\r\n        return this.getUserPasswordHashWithEmail(email).then((res) => {\r\n\r\n            // No has is returned with false'y calls.\r\n            if (!res.hasOwnProperty('hash')) {\r\n                return res;\r\n            }\r\n\r\n            // Compare passwords.\r\n            return this.comparePasswords(res.hash, password).then((bool) => {\r\n                if (!bool) {\r\n                    return {msg: 'Incorrect password provided for account delete', payload: 0}\r\n                }\r\n\r\n                // Finally delete the account.\r\n                return Promise.using(getSqlConnection(), (connection) => {\r\n                    return connection.query('DELETE FROM `accounts` WHERE u_email=?', [email]).then((res) => {\r\n                        return {msg: 'Account Successfully Deleted.', payload: 1};\r\n                    })\r\n                });\r\n\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the users hashed and salted password for the database.\r\n     * This method is only to be used when a validated user with an existing profile makes a call.\r\n     * @param userID\r\n     */\r\n    getUserPasswordHash(userID) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('SELECT u_password from `accounts` WHERE id=?', [userID]).then((res) => {\r\n                return {hash: res[0].u_password}\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that get's a user hash using there email address, to be used alongside deletion of an existing account.\r\n     * @param email\r\n     * @returns {Bluebird<any>}\r\n     */\r\n    getUserPasswordHashWithEmail(email) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('SELECT u_password from `accounts` WHERE u_email=?', [email]).then((res) => {\r\n                if (res.length > 0) {\r\n                    return {hash: res[0].u_password};\r\n                } else {\r\n                    return {msg: 'No Email found in accounts.', payload: 0};\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Inserts a new hashed password into the user account.\r\n     * @param id\r\n     * @param password\r\n     */\r\n    insertNewHashedPassword(id, password) {\r\n        return this.encryptPassword(password).then((hash) => {\r\n            return Promise.using(getSqlConnection(), (connection) => {\r\n                return connection.query('UPDATE `accounts` SET u_password=? WHERE id=?', [hash, id]).then(() => {\r\n                    return {\r\n                        status: 'ok',\r\n                        message: 'Password Changed!'\r\n                    }\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n}"]}
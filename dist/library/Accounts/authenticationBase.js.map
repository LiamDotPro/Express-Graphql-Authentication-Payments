{"version":3,"sources":["../../../library/Accounts/authenticationBase.js"],"names":["require","config","accounts","authenticationBase","process","env","ENVIROMENT","new","target","TypeError","password","hash","email","findAll","where","u_email","foundAccounts","length","msg","payload","comparePasswords","dataValues","u_password","res","console","log","user","id","plainText","compare","text","re","test","checkIfEmailInString","result","name","fullname","hasOwnProperty","accountType","encryptPassword","pass","create","createdAccount","getUserPasswordHashWithEmail","userObj","bool","destroy","force","userID","then","using","connection","query","status","message"],"mappings":"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","file":"authenticationBase.js","sourcesContent":["require('dotenv').config();\r\nimport 'babel-polyfill';\r\nimport getSqlConnection from '../../db/db';\r\nimport Promise from 'bluebird';\r\nimport bcrypt from 'bcrypt';\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Accounts Model\r\nconst accounts = db.accounts;\r\n\r\n/**\r\n * Abstract class that acts as the concrete functions for our registering api.\r\n */\r\nexport default class authenticationBase {\r\n\r\n    constructor() {\r\n        if (process.env.ENVIROMENT === 'production' && new.target === authenticationBase) {\r\n            throw new TypeError(\"Cannot construct Abstract instances directly\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encrypts plain text passwords using a safe encryption method.\r\n     * @param password String\r\n     */\r\n    async encryptPassword(password) {\r\n        return await bcrypt.hash(password, 10);\r\n    }\r\n\r\n\r\n    /**\r\n     * Validates a user from within the database.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    async validateUser(email, password) {\r\n\r\n        let foundAccounts = await accounts.findAll({where: {u_email: email}});\r\n\r\n        if (!foundAccounts.length > 0) {\r\n            return {\r\n                msg: 'Account or password did not match!',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n        let res = await this.comparePasswords(foundAccounts[0].dataValues.u_password, password);\r\n\r\n        if (!res) {\r\n            console.log(\"Second\");\r\n            return {\r\n                msg: 'Account or password did not match!',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n        return {\r\n            msg: 'Success',\r\n            payload: 11,\r\n            user: {\r\n                id: foundAccounts[0].dataValues.id\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This does a simple bcrypt comparision to identify correctness.\r\n     * @param hash\r\n     * @param plainText\r\n     */\r\n    async comparePasswords(hash, plainText) {\r\n        return await bcrypt.compare(plainText, hash);\r\n    }\r\n\r\n    /**\r\n     * Checks to make sure an email is present within a string.\r\n     * @param text\r\n     * @returns {boolean}\r\n     */\r\n    checkIfEmailInString(text) {\r\n        let re = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\r\n        return re.test(text);\r\n    }\r\n\r\n    /**\r\n     * This checks for a duplicate account inside the database.\r\n     * Payload is a boolean Int\r\n     */\r\n    async checkForDuplicateAccount(email) {\r\n        if (email.length < 5 || !this.checkIfEmailInString(email)) {\r\n            return {\r\n                msg: 'Fail - No Email Found',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n        let result = await accounts.findAll({\r\n            where: {\r\n                u_email: email\r\n            }\r\n        });\r\n\r\n        if (result.length !== 0) {\r\n            return {\r\n                msg: 'Fail - Duplicate Account',\r\n                payload: 1\r\n            }\r\n        }\r\n\r\n        // No duplicate found.\r\n        return {\r\n            msg: 'Success',\r\n            payload: 0\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find Account by Id\r\n     */\r\n    async findAccountById(id) {\r\n        let res = await accounts.findAll({\r\n            where: {\r\n                id: id\r\n            }\r\n        });\r\n\r\n        return res.length > 0 ? {\r\n            name: res[0].dataValues.fullname,\r\n            email: res[0].dataValues.u_email,\r\n            msg: 'success'\r\n        } : false;\r\n    }\r\n\r\n    /**\r\n     * Find Account By Id and also verify account status as being administrator.\r\n     */\r\n    async findAccountByIdAdmin(id) {\r\n\r\n        let res = await accounts.findAll({\r\n            where: {\r\n                id: id\r\n            }\r\n        });\r\n\r\n        // Check to see if there is an occurrence\r\n        if (res.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        if (!res[0].dataValues.hasOwnProperty('accountType') || res[0].dataValues.accountType !== 2) {\r\n            return false;\r\n        }\r\n\r\n        return {\r\n            name: res[0].dataValues.fullname,\r\n            email: res[0].dataValues.u_email,\r\n            accountType: res[0].dataValues.accountType,\r\n            msg: 'success'\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * This is the last part of the system.\r\n     * All passwords should be ran through bcrypt before being inserted.\r\n     * @param email\r\n     * @param password string\r\n     */\r\n    async createAccount(email, password) {\r\n        let pass = await this.encryptPassword(password);\r\n        let createdAccount = await accounts.create({\r\n            u_email: email,\r\n            u_password: pass,\r\n            accountType: 1,\r\n            fullname: ''\r\n        });\r\n\r\n        return {\r\n            msg: 'Success', payload: 10\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Permanently removes an account from the system.\r\n     *\r\n     * Usage of this method should be heavily guarded as it is a standardized method that provides only base functionality with no security.\r\n     */\r\n    async deleteAccount(email, password) {\r\n\r\n        let userObj = await this.getUserPasswordHashWithEmail(email);\r\n\r\n        // Make sure that hash property is found on result object\r\n        if (!userObj.user.dataValues.hasOwnProperty('u_password')) {\r\n            return {msg: 'An error occurred.', payload: 1}\r\n        }\r\n\r\n        let bool = await this.comparePasswords(userObj.user.dataValues.u_password, password);\r\n\r\n        if (!bool) {\r\n            return {msg: 'Incorrect password provided for account delete', payload: 1}\r\n        }\r\n\r\n        // Remove the user.\r\n        await userObj.user.destroy({force: true});\r\n\r\n        return {msg: 'Success', payload: 0};\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the users hashed and salted password for the database.\r\n     * This method is only to be used when a validated user with an existing profile makes a call.\r\n     * @param userID\r\n     */\r\n    async getUserPasswordHash(userID) {\r\n        let res = await accounts.findAll({\r\n            where: {\r\n                id: userID\r\n            }\r\n        });\r\n\r\n        if (!res.length > 0) {\r\n            return {msg: 'Fail', payload: 1}\r\n        }\r\n\r\n        return {hash: res[0].dataValues.u_password, msg: 'Success', payload: 0};\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper method that get's a user hash using there email address, to be used alongside deletion of an existing account.\r\n     * @param email\r\n     */\r\n    async getUserPasswordHashWithEmail(email) {\r\n\r\n        let res = await accounts.findAll({\r\n            where: {\r\n                u_email: email\r\n            }\r\n        });\r\n\r\n        if (!res.length > 0) {\r\n            return {msg: 'No Email found in accounts.', payload: 1};\r\n        }\r\n\r\n        return {user: res[0], payload: 0};\r\n    }\r\n\r\n    /**\r\n     * Inserts a new hashed password into the user account.\r\n     * @param id\r\n     * @param password\r\n     */\r\n    insertNewHashedPassword(id, password) {\r\n        return this.encryptPassword(password).then((hash) => {\r\n            return Promise.using(getSqlConnection(), (connection) => {\r\n                return connection.query('UPDATE `accounts` SET u_password=? WHERE id=?', [hash, id]).then(() => {\r\n                    return {\r\n                        status: 'ok',\r\n                        message: 'Password Changed!'\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n"]}
{"version":3,"sources":["../../../library/Accounts/authentication.js"],"names":["accounts","authentication","email","password","checkForDuplicateAccount","toLowerCase","result","payload","msg","createAccount","res","validateUser","currPass","newPass","userID","getUserPasswordHash","comparePasswords","hash","compare","status","message","insertNewHashedPassword"],"mappings":";;;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;AADA;;;AAEA;AACA,IAAMA,WAAW,gBAAGA,QAApB;;AAEA;;;;;;;;;IAQqBC,c;;;AAEjB,8BAAc;AAAA;;AAAA;AAEb;;AAED;;;;;;;;;;;;;;;gGAUmBC,K,EAAOC,Q;;;;;;;uCAEH,KAAKC,wBAAL,CAA8BF,MAAMG,WAAN,EAA9B,C;;;AAAfC,sC;;sCAEAA,OAAOC,OAAP,KAAmB,C;;;;;iEACZ;AACHC,yCAAKF,OAAOE;AADT,iC;;;sCAKPF,OAAOC,OAAP,KAAmB,C;;;;;iEACZ;AACHC,yCAAKF,OAAOE;AADT,iC;;;;uCAKK,KAAKC,aAAL,CAAmBP,MAAMG,WAAN,EAAnB,EAAwCF,QAAxC,C;;;AAAZO,mC;iEAEG;AACHF,yCAAK,sBADF;AAEHD,6CAASG,IAAIH;AAFV,iC;;;;;;;;;;;;;;;;;AAMX;;;;;;;;;;;kGAOYL,K,EAAOC,Q;;;;;;uCACF,KAAKQ,YAAL,CAAkBT,KAAlB,EAAyBC,QAAzB,C;;;;;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;kGAMyBS,Q,EAAUC,O,EAASC,M;;;;;;;uCACxB,KAAKC,mBAAL,CAAyBD,MAAzB,C;;;AAAZJ,mC;;uCAEgB,KAAKM,gBAAL,CAAsBN,IAAIO,IAA1B,EAAgCL,QAAhC,C;;;AAAhBM,uC;;oCAECR,G;;;;;kEACM;AACHS,4CAAQ,KADL;AAEHC,6CAAS;AAFN,iC;;;;uCAME,KAAKC,uBAAL,CAA6BP,MAA7B,EAAqCD,OAArC,C;;;;;;;;;;;;;;;;;;;;;;;;kBAtEAZ,c","file":"authentication.js","sourcesContent":["import 'babel-polyfill';\r\nimport authenticationBase from \"./authenticationBase\";\r\n// Database Class.\r\nimport db from '../../models/index';\r\n// Accounts Model\r\nconst accounts = db.accounts;\r\n\r\n/**\r\n * Payload Numbering\r\n *\r\n * 0 Success\r\n * 1 Failure\r\n * 10 Account Creation\r\n * 11 Successful Login\r\n */\r\nexport default class authentication extends authenticationBase {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * List of error handling and checks.\r\n     *\r\n     * Duplicate Entry Test\r\n     * length Test\r\n     * @todo test with postman for if extra length is needed, also implementing special char check regexp\r\n     * @param email\r\n     * @param password\r\n     * @constructor\r\n     */\r\n    async registerUser(email, password) {\r\n\r\n        let result = await this.checkForDuplicateAccount(email.toLowerCase());\r\n\r\n        if (result.payload !== 0) {\r\n            return {\r\n                msg: result.msg\r\n            }\r\n        }\r\n\r\n        if (result.payload !== 0) {\r\n            return {\r\n                msg: result.msg\r\n            }\r\n        }\r\n\r\n        let res = await this.createAccount(email.toLowerCase(), password);\r\n\r\n        return {\r\n            msg: 'New Account Created.',\r\n            payload: res.payload\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Separate method from the attempt to validate specifically so we can add extra\r\n     * checks and further integration later if without worrying about moving stuff\r\n     * to methods.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    async login(email, password) {\r\n        return await this.validateUser(email, password);\r\n    }\r\n\r\n\r\n    /**\r\n     * Updates a users password provided they pass the original current password.\r\n     * @param currPass\r\n     * @param newPass\r\n     * @param userID\r\n     */\r\n    async updateUserPassword(currPass, newPass, userID) {\r\n        let res = await this.getUserPasswordHash(userID);\r\n\r\n        let compare = await this.comparePasswords(res.hash, currPass);\r\n\r\n        if (!res) {\r\n            return {\r\n                status: 'err',\r\n                message: 'Current Password does not match'\r\n            }\r\n        }\r\n\r\n        return await this.insertNewHashedPassword(userID, newPass);\r\n    }\r\n\r\n}\r\n"]}
{"version":3,"sources":["../../../library/Accounts/authentication.js"],"names":["authentication","email","password","checkForDuplicateAccount","toLowerCase","then","res","payload","length","authenticationBase","encryptPassword","pass","createAccount","msg","validateUser","currPass","newPass","userID","getUserPasswordHash","comparePasswords","hash","insertNewHashedPassword","status","message"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;IAQqBA,c;;;AAEjB,8BAAc;AAAA;;AAAA;AAEb;;AAED;;;;;;;;;;;;;;;qCAWaC,K,EAAOC,Q,EAAU;AAAA;;AAC1B,mBAAO,KAAKC,wBAAL,CAA8BF,MAAMG,WAAN,EAA9B,EAAmDC,IAAnD,CAAwD,UAACC,GAAD,EAAS;AACpE,oBAAIA,IAAIC,OAAJ,KAAgB,CAApB,EAAuB;AACnB,wBAAIL,SAASM,MAAT,IAAmB,CAAvB,EAA0B;AACtB,+BAAOC,mBAAmBC,eAAnB,CAAmCR,QAAnC,EAA6CG,IAA7C,CAAkD,UAACM,IAAD,EAAU;AAC/D,mCAAO,OAAKC,aAAL,CAAmBX,MAAMG,WAAN,EAAnB,EAAwCO,IAAxC,EAA8CN,IAA9C,CAAmD,YAAM;AAC5D,uCAAO;AACHQ,yCAAK,sBADF;AAEHN,6CAASD,IAAIC;AAFV,iCAAP;AAIH,6BALM,CAAP;AAMH,yBAPM,CAAP;AAQH,qBATD,MASO;AACH,+BAAO;AACHM,iCAAK;AADF,yBAAP;AAGH;AACJ,iBAfD,MAeO;AACH,2BAAO;AACHA,6BAAKP,IAAIO;AADN,qBAAP;AAGH;AAEJ,aAtBM,CAAP;AAuBH;;AAED;;;;;;;;;;8BAOMZ,K,EAAOC,Q,EAAU;AACnB,mBAAO,KAAKY,YAAL,CAAkBb,KAAlB,EAAyBC,QAAzB,EAAmCG,IAAnC,CAAwC,UAACC,GAAD,EAAS;AACpD,uBAAOA,GAAP;AACH,aAFM,CAAP;AAGH;;AAGD;;;;;;2CAGmBS,Q,EAAUC,O,EAASC,M,EAAQ;AAAA;;AAC1C,mBAAO,KAAKC,mBAAL,CAAyBD,MAAzB,EAAiCZ,IAAjC,CAAsC,UAACC,GAAD,EAAS;AAClD,uBAAOG,mBAAmBU,gBAAnB,CAAoCb,IAAIc,IAAxC,EAA8CL,QAA9C,CAAP;AACH,aAFM,EAEJV,IAFI,CAEC,UAACC,GAAD,EAAS;AACb,oBAAIA,QAAQ,IAAZ,EAAkB;AACd,2BAAO,OAAKe,uBAAL,CAA6BJ,MAA7B,EAAqCD,OAArC,CAAP;AACH,iBAFD,MAEO;AACH,2BAAO;AACHM,gCAAQ,KADL;AAEHC,iCAAS;AAFN,qBAAP;AAIH;AACJ,aAXM,CAAP;AAYH;;;;;;kBAzEgBvB,c","file":"authentication.js","sourcesContent":["import Promise from 'bluebird';\r\nimport baseUserFunctions from \"./authenticationBase\";\r\n\r\n/**\r\n * Payload Numbering\r\n *\r\n * 0 Success\r\n * 1 Failure\r\n * 10 Account Creation\r\n * 11 Successful Login\r\n */\r\nexport default class authentication extends baseUserFunctions {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * List of error handling and checks.\r\n     *\r\n     * Duplicate Entry Test\r\n     * length Test\r\n     * @todo test with postman for if extra length is needed, also implementing special char check regexp\r\n     * @param email\r\n     * @param password\r\n     * @returns {Promise.<TResult>}\r\n     * @constructor\r\n     */\r\n    registerUser(email, password) {\r\n        return this.checkForDuplicateAccount(email.toLowerCase()).then((res) => {\r\n            if (res.payload === 0) {\r\n                if (password.length >= 6) {\r\n                    return authenticationBase.encryptPassword(password).then((pass) => {\r\n                        return this.createAccount(email.toLowerCase(), pass).then(() => {\r\n                            return {\r\n                                msg: 'New Account Created.',\r\n                                payload: res.payload\r\n                            }\r\n                        })\r\n                    });\r\n                } else {\r\n                    return {\r\n                        msg: 'Password not long enough'\r\n                    }\r\n                }\r\n            } else {\r\n                return {\r\n                    msg: res.msg\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Separate method from the attempt to validate specifically so we can add extra\r\n     * checks and further integration later if without worrying about moving stuff\r\n     * to methods.\r\n     * @param email\r\n     * @param password\r\n     */\r\n    login(email, password) {\r\n        return this.validateUser(email, password).then((res) => {\r\n            return res;\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Updates a users password provided they pass the original current password.\r\n     */\r\n    updateUserPassword(currPass, newPass, userID) {\r\n        return this.getUserPasswordHash(userID).then((res) => {\r\n            return authenticationBase.comparePasswords(res.hash, currPass);\r\n        }).then((res) => {\r\n            if (res === true) {\r\n                return this.insertNewHashedPassword(userID, newPass);\r\n            } else {\r\n                return {\r\n                    status: 'err',\r\n                    message: 'Current Password does not match'\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}"]}
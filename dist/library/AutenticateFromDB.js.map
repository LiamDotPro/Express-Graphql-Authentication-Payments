{"version":3,"sources":["../../library/AutenticateFromDB.js"],"names":["authenticateFromDB","email","password","checkIfAlreadyRegistered","then","res","result","using","connection","query","length","message","resolve","validateUser","comparePasswords","hash","compare","resPass","id","status","catch","err","console","log"],"mappings":";;;;;;qjBAAA;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,kB;;;;;;;;;AAEjB;;;;;qCAKaC,K,EAAOC,Q,EAAU;AAC1B,mBAAO,KAAKC,wBAAL,CAA8BF,KAA9B,EAAqCG,IAArC,CAA0C,UAACC,GAAD,EAAS;AACtD,oBAAIA,IAAIC,MAAJ,KAAe,SAAnB,EAA8B,CAE7B,CAFD,MAEO,CAEN;AACJ,aANM,CAAP;AAOH;;;iDAEwBL,K,EAAO;AAC5B,mBAAO,mBAAQM,KAAR,CAAc,mBAAd,EAAkC,UAACC,UAAD,EAAgB;AACrD,uBAAOA,WAAWC,KAAX,CAAiB,sCAAjB,EAAyD,CAACR,KAAD,CAAzD,EAAkEG,IAAlE,CAAuE,UAACC,GAAD,EAAS;AACnF,wBAAIA,IAAIK,MAAJ,GAAa,CAAjB,EAAoB;AAChB,+BAAO;AACHJ,oCAAQ,MADL;AAEHK,qCAAS;AAFN,yBAAP;AAIH,qBALD,MAKO;AACH,+BAAO;AACHL,oCAAQ;AADL,yBAAP;AAGH;AACJ,iBAXM,CAAP;AAYH,aAbM,CAAP;AAcH;;AAGD;;;;;;;;2CAKmBL,K,EAAOC,Q,EAAU;;AAEhC;AACA,mBAAO,mBAAQU,OAAR,CAAgBC,aAAaX,QAAb,EAAuBD,KAAvB,CAAhB,CAAP;;AAEA;;;;;;AAMA,qBAASa,gBAAT,CAA0BZ,QAA1B,EAAoCa,IAApC,EAA0C;AACtC,uBAAO,iBAAOC,OAAP,CAAed,QAAf,EAAyBa,IAAzB,EAA+BX,IAA/B,CAAoC,UAACC,GAAD,EAAS;AAChD,2BAAOA,QAAQ,IAAf;AACH,iBAFM,CAAP;AAGH;;AAED;;;;;;AAMA,qBAASQ,YAAT,CAAsBX,QAAtB,EAAgCD,KAAhC,EAAuC;AACnC,uBAAO,mBAAQM,KAAR,CAAc,mBAAd,EAAkC,UAACC,UAAD,EAAgB;AACrD,2BAAOA,WAAWC,KAAX,CAAiB,sCAAjB,EAAyD,CAACR,KAAD,CAAzD,EAAkEG,IAAlE,CAAuE,UAACC,GAAD,EAAS;AACnF;AACA,4BAAIA,IAAIK,MAAJ,GAAa,CAAjB,EAAoB;AAChB,mCAAOI,iBAAiBZ,QAAjB,EAA2BG,IAAI,CAAJ,EAAOH,QAAlC,EAA4CE,IAA5C,CAAiD,UAACa,OAAD,EAAa;AACjE,oCAAIA,YAAY,IAAhB,EAAsB;AAClB,2CAAO;AACHX,gDAAQ;AACJY,gDAAIb,IAAI,CAAJ,EAAOa,EADP;AAEJjB,mDAAOI,IAAI,CAAJ,EAAOJ;AAFV,yCADL;AAKHkB,gDAAQ;AALL,qCAAP;AAOH,iCARD,MAQO;AACH,2CAAO;AACHb,gDAAQ,KADL;AAEHa,gDAAQ;AAFL,qCAAP;AAIH;AACJ,6BAfM,CAAP;AAgBH,yBAjBD,MAiBO;AACH;AACA,mCAAO;AACHb,wCAAQ,KADL;AAEHa,wCAAQ;AAFL,6BAAP;AAIH;AACJ,qBA1BM,EA0BJC,KA1BI,CA0BE,UAACC,GAAD,EAAS;AACdC,gCAAQC,GAAR,CAAYF,GAAZ;AACA,+BAAO,EAACA,KAAKA,GAAN,EAAP;AACH,qBA7BM,CAAP;AA8BH,iBA/BM,CAAP;AAgCH;AACJ;;;;;;kBAjGgBrB,kB","file":"AutenticateFromDB.js","sourcesContent":["// Invoke database connection to allow users to be found within the database.\r\nimport getSqlConnection from '../db/db';\r\nimport bcrypt from 'bcrypt';\r\nimport Promise from 'bluebird';\r\n\r\nexport default class authenticateFromDB {\r\n\r\n    /**\r\n     * This function handles an incoming request to register a new user within a system.\r\n     * Makes use of the bcrypt dependency for hashing users passwords.\r\n     * @constructor\r\n     */\r\n    RegisterUser(email, password) {\r\n        return this.checkIfAlreadyRegistered(email).then((res) => {\r\n            if (res.result === 'success') {\r\n\r\n            } else {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    checkIfAlreadyRegistered(email) {\r\n        return Promise.using(getSqlConnection(), (connection) => {\r\n            return connection.query('Select * from accounts where email=?', [email]).then((res) => {\r\n                if (res.length > 0) {\r\n                    return {\r\n                        result: 'fail',\r\n                        message: 'The Email you entered is already registered.'\r\n                    };\r\n                } else {\r\n                    return {\r\n                        result: 'success'\r\n                    };\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * This function handles the verification of a user attempting to login to the system.\r\n     * Makes use of bcrypt to handle decrypting of passwords.\r\n     * @constructor\r\n     */\r\n    VerifyLoginAttempt(email, password) {\r\n\r\n        // Returns a promise that resolves once the user has been successfully identified within the database.\r\n        return Promise.resolve(validateUser(password, email));\r\n\r\n        /**\r\n         * Compares a password against a hash within the database, returns a boolean if truthness can be asserted.\r\n         * @param password\r\n         * @param hash\r\n         * @returns {Promise.<Boolean>}\r\n         */\r\n        function comparePasswords(password, hash) {\r\n            return bcrypt.compare(password, hash).then((res) => {\r\n                return res === true;\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Validates a user using the bcrypt compare function and returns an object if found and password matches.\r\n         * Returns false on all other routes and logs a error if an unexpected error is caught.\r\n         * @param password\r\n         * @param email\r\n         */\r\n        function validateUser(password, email) {\r\n            return Promise.using(getSqlConnection(), (connection) => {\r\n                return connection.query('Select * from accounts where email=?', [email]).then((res) => {\r\n                    // Firstly test if a record can be found\r\n                    if (res.length > 0) {\r\n                        return comparePasswords(password, res[0].password).then((resPass) => {\r\n                            if (resPass === true) {\r\n                                return {\r\n                                    result: {\r\n                                        id: res[0].id,\r\n                                        email: res[0].email\r\n                                    },\r\n                                    status: 1\r\n                                };\r\n                            } else {\r\n                                return {\r\n                                    result: false,\r\n                                    status: 1\r\n                                };\r\n                            }\r\n                        });\r\n                    } else {\r\n                        // No user found\r\n                        return {\r\n                            result: false,\r\n                            status: 1\r\n                        };\r\n                    }\r\n                }).catch((err) => {\r\n                    console.log(err);\r\n                    return {err: err};\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n}"]}
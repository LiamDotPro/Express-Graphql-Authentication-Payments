{"version":3,"sources":["../server.js"],"names":["app","require","config","redisHost","process","env","ENVIROMENT","session","redisStore","client","createClient","host","port","use","secret","store","ttl","saveUninitialized","resave","on","console","log","err","json","urlencoded","extended","configuredPassport","configurePassport","passport","initialize","listen"],"mappings":";;AAAA;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;;;AAEA;;AACA;;;;AACA;;AAHA;;AAJA;;AAJA;;AAJA;AAgBA,IAAMA,MAAM,wBAAZ;AACA;;AAPA;;AAJA;;AAJA;;AAJA;AAoBAC,QAAQ,QAAR,EAAkBC,MAAlB;;AAEA;;;AAGA,IAAIC,YAAY,EAAhB;AACAC,QAAQC,GAAR,CAAYC,UAAZ,KAA2B,aAA3B,GAA2CH,YAAY,gBAAvD,GAA0E,WAA1E;;AAEA,IAAII,UAAUN,QAAQ,iBAAR,CAAd;AACA,IAAIO,aAAaP,QAAQ,eAAR,EAAyBM,OAAzB,CAAjB;AACA,IAAIE,SAAS,gBAAMC,YAAN,CAAmB,EAACC,MAAM,WAAP,EAAoBC,MAAM,IAA1B,EAAnB,CAAb;;AAEA;;;AAGAZ,IAAIa,GAAJ,CAAQN,QAAQ;AACZO,UAAQ,UADI;AAEZ;AACAC,SAAO,IAAIP,UAAJ,CAAe,EAACG,MAAM,WAAP,EAAoBC,MAAM,IAA1B,EAAgCH,QAAQA,MAAxC,EAAgDO,KAAK,GAArD,EAAf,CAHK;AAIZC,qBAAmB,KAJP;AAKZC,UAAQ;AALI,CAAR,CAAR;;AAQAT,OAAOU,EAAP,CAAU,SAAV,EAAqB,YAAM;AACvBC,UAAQC,GAAR,CAAY,oBAAZ;AACH,CAFD;;AAIAZ,OAAOU,EAAP,CAAU,OAAV,EAAmB,UAACG,GAAD,EAAS;AACxBF,UAAQC,GAAR,CAAY,kBAAkBC,GAA9B;AACH,CAFD;;AAIA;;;AAGA,IAAIV,OAAO,IAAX;AACAR,QAAQC,GAAR,CAAYC,UAAZ,KAA2B,aAA3B,GAA2CM,OAAO,IAAlD,GAAyDA,OAAO,IAAhE;;AAGA;AACA,eAAMZ,GAAN;;AAEA;;;AAGAA,IAAIa,GAAJ,CAAQ,uBAAR;;AAEA;;;AAGAb,IAAIa,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;;;AAGAb,IAAIa,GAAJ,CAAQ,qBAAR;;AAEA;;;AAGAb,IAAIa,GAAJ,CAAQ,qBAAWU,IAAX,EAAR;AACAvB,IAAIa,GAAJ,CAAQ,qBAAWW,UAAX,CAAsB;AAC1BC,YAAU;AADgB,CAAtB,CAAR;;AAIA;;;AAGA,IAAIC,qBAAqB,wBAAzB;AACA;AACAA,mBAAmBC,iBAAnB;;AAEA3B,IAAIa,GAAJ,CAAQa,mBAAmBE,QAAnB,CAA4BC,UAA5B,EAAR;AACA7B,IAAIa,GAAJ,CAAQa,mBAAmBE,QAAnB,CAA4BrB,OAA5B,EAAR;;AAEA;AACA,+BAAYP,GAAZ;;AAEAA,IAAI8B,MAAJ,CAAWlB,IAAX,EAAiB,YAAM;AACnBQ,UAAQC,GAAR,CAAY,2BAAZ,EAAyCT,IAAzC;AACH,CAFD","file":"server.js","sourcesContent":["import 'babel-polyfill';\r\n// express\r\nimport express from 'express';\r\n//helmet\r\nimport helmet from 'helmet';\r\n//morgan\r\nimport morgan from 'morgan';\r\n//Passport\r\nimport passport from './library/Passport/Passport';\r\n// express connect redis\r\nimport redis from 'redis';\r\n// body parser\r\nimport bodyParser from 'body-parser';\r\n//cors\r\nimport cors from 'cors';\r\n// socketio\r\nimport {setup} from './socketio/io';\r\nimport {loadRouters} from './routers/RouterLoader';\r\n// start app\r\nconst app = express();\r\n// Configure out environment to be available.\r\nrequire('dotenv').config();\r\n\r\n/**\r\n * Redis Store Configuration\r\n */\r\nlet redisHost = '';\r\nprocess.env.ENVIROMENT === 'development' ? redisHost = '109.237.26.131' : 'localhost';\r\n\r\nlet session = require('express-session');\r\nlet redisStore = require('connect-redis')(session);\r\nlet client = redis.createClient({host: 'localhost', port: 6379});\r\n\r\n/**\\\r\n * Reddis Sessions\r\n */\r\napp.use(session({\r\n    secret: 'ssshhhhh',\r\n    // create new redis store.\r\n    store: new redisStore({host: 'localhost', port: 6379, client: client, ttl: 260}),\r\n    saveUninitialized: false,\r\n    resave: true\r\n}));\r\n\r\nclient.on('connect', () => {\r\n    console.log('Connected to Redis');\r\n});\r\n\r\nclient.on('error', (err) => {\r\n    console.log('Redis error: ' + err);\r\n});\r\n\r\n/**\r\n * Port Configuration\r\n */\r\nlet port = 3000;\r\nprocess.env.ENVIROMENT === 'development' ? port = 3000 : port = 8080;\r\n\r\n\r\n// Setup the socketio api module\r\nsetup(app);\r\n\r\n/**\r\n * Integrate helmet for mitigation of various attacks.\r\n */\r\napp.use(helmet());\r\n\r\n/**\r\n * Integrate morgan for developer friendly logs of http requests.\r\n */\r\napp.use(morgan('dev'));\r\n\r\n/**\r\n * CORS\r\n */\r\napp.use(cors());\r\n\r\n/**\r\n * body parser\r\n */\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\n\r\n/**\r\n * Passport JWT\r\n */\r\nlet configuredPassport = new passport();\r\n// Only configure the passport once.\r\nconfiguredPassport.configurePassport();\r\n\r\napp.use(configuredPassport.passport.initialize());\r\napp.use(configuredPassport.passport.session());\r\n\r\n// Load routers\r\nloadRouters(app);\r\n\r\napp.listen(port, () => {\r\n    console.log('Http Server listening on ', port);\r\n});\r\n"]}
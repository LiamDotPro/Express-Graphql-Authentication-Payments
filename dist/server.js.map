{"version":3,"sources":["../server.js"],"names":["require","config","session","redisStore","client","createClient","port","process","env","ENVIROMENT","server","createServer","name","strictRouting","formatters","req","res","body","cb","use","plugins","bodyParser","queryParser","configuredPassport","configurePassport","passport","initialize","secret","store","host","ttl","saveUninitialized","resave","crossOrigin","next","header","applyRoutes","console","log","method","url","get","serveStatic","directory","pre","headers","accept","listen"],"mappings":"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","file":"server.js","sourcesContent":["// Configure out environment to be available.\r\nrequire('dotenv').config();\r\n// Restify\r\nimport restify from 'restify';\r\n//helmet\r\nimport helmet from 'helmet';\r\n//morgan\r\nimport morgan from 'morgan';\r\n//Passport\r\nimport passport from './library/Passport/Passport';\r\n// express connect reddis\r\nimport redis from 'redis';\r\nlet session = require('express-session');\r\nlet redisStore = require('connect-redis')(session);\r\nlet client  = redis.createClient();\r\n// Routers\r\nimport AuthRouter from './routers/v1/authentication';\r\nimport PayRouter from './routers/v1/payments';\r\nimport CatalogRouter from './routers/v1/catalog';\r\nimport AccountRouter from './routers/v1/accounts';\r\nimport CartRouter from './routers/v1/cart';\r\nimport {setup} from './socketio/io';\r\n\r\nlet port = 3000;\r\n\r\nprocess.env.ENVIROMENT === 'development' ? port = 3000 : port = 80;\r\n\r\nlet server = restify.createServer({\r\n    name: 'Main Http Server',\r\n    strictRouting: true,\r\n    formatters: {\r\n        'text/html': function (req, res, body, cb) {\r\n            cb(null, body)\r\n        }\r\n    }\r\n});\r\n\r\n// Setup the socketio api module\r\nsetup(server);\r\n\r\n/**\r\n * Uses restify v5 plugins to handle parsing of body and queries by default.\r\n */\r\nserver.use(restify.plugins.bodyParser());\r\nserver.use(restify.plugins.queryParser());\r\n\r\n/**\r\n * Integrate helmet for mitigation of various attacks.\r\n */\r\nserver.use(helmet());\r\n\r\n/**\r\n * Integrate morgan for developer friendly logs of http requests.\r\n */\r\nserver.use(morgan('dev'));\r\n\r\n/**\r\n * Passport JWT\r\n */\r\nlet configuredPassport = new passport();\r\n// Only configure the passport once.\r\nconfiguredPassport.configurePassport();\r\nserver.use(configuredPassport.passport.initialize());\r\n\r\n/**\r\n * Reddis Sessions\r\n */\r\nserver.use(session({\r\n    secret: 'ssshhhhh',\r\n    // create new redis store.\r\n    store: new redisStore({ host: 'localhost', port: 6379, client: client,ttl :  260}),\r\n    saveUninitialized: false,\r\n    resave: false\r\n}));\r\n\r\n/**\r\n * Handle Cross Origin Requests.\r\n */\r\nserver.use(\r\n    function crossOrigin(req, res, next) {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\r\n        return next();\r\n    }\r\n);\r\n\r\n/**\r\n * Authentication Routing\r\n */\r\nAuthRouter.applyRoutes(server, '/v1/auth');\r\n\r\n/**\r\n * Payments Routing\r\n */\r\nPayRouter.applyRoutes(server, '/v1/pay');\r\n\r\n/**\r\n * Catalog Routing\r\n */\r\nCatalogRouter.applyRoutes(server, '/v1/catalog');\r\n\r\n/**\r\n * Accounts Routing\r\n */\r\nAccountRouter.applyRoutes(server, '/v1/accounts');\r\n\r\n/**\r\n * Cart Routing\r\n */\r\nCartRouter.applyRoutes(server, '/v1/cart');\r\n\r\n/**\r\n * Handles debugging.\r\n */\r\nserver.use((req, res, next) => {\r\n    console.log(req.method + ' ' + req.url);\r\n    return next();\r\n});\r\n\r\n/**\r\n * Handle the serving of static files that live within public.\r\n */\r\nserver.get(\r\n    /\\/(.*)?.*/,\r\n    restify.plugins.serveStatic({\r\n        directory: './public',\r\n    })\r\n);\r\n\r\n/**\r\n * Makes the default accepted headers application/json only.\r\n */\r\nserver.pre(function (req, res, next) {\r\n    req.headers.accept = 'application/json';\r\n    return next();\r\n});\r\n\r\nserver.listen(port, function () {\r\n    console.log('Http Server listening on ', port);\r\n});\r\n"]}